@model RMA
@{
    ViewBag.title = "修改RMA";
    var Warehouselist = EnumData.WarehouseDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var RMAStatusList = EnumData.RMAStatusList().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var RMAActionList = EnumData.RMAActionList().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var CompanyDDL = EnumData.CompanyDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var ChannelList = EnumData.ChannelList().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var RMAReasonList = EnumData.RMAReasonList();
}
<div id="content">
    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-xs-12">
                <div class="jarviswidget" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-sortable="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>

                        <h2>@ViewBag.title </h2>
                        <ul class="nav nav-tabs pull-right">
                            <li><a data-toggle="tab" href="#hb1">@ViewBag.title</a></li>
                        </ul>
                    </header>
                    <div>
                        <div class="widget-body no-padding">
                            <form id="data-form" class="form-horizontal" method="post" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                @Html.Hidden("ID")
                                @Html.Hidden("SID")
                                <div id="content" class="tab-content">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="tab-pane" id="hb1">
                                        <h1><b>RMA# @Model.ID</b></h1>
                                        <fieldset>
                                            <legend>@ViewBag.title</legend>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.OrderID, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.Editor("OrderID", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                </div>

                                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownList("Status", RMAStatusList, htmlAttributes: new { @class = "form-control" })
                                                </div>

                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SourceID, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.Editor("SourceID", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                </div>
                                                @Html.LabelFor(model => model.Action, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownList("Action", RMAActionList, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SourceCaseID, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.Editor("SourceCaseID", new { htmlAttributes = new { @class = "form-control" } })
                                                </div>
                                                @Html.Label("Warranty / Repair #", htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.Editor("Warranty", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.CompanyID, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListLabel("CompanyID", CompanyDDL, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                                                </div>
                                                @Html.Label("Credit Memo #", htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.Editor("CreditMemo", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Channel, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListLabel("Channel", ChannelList, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                                                </div>
                                                @Html.Label("Create Date", htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    <input class="form-control" type="text" value="@Model.CreateAt.ToLocalTime()" readonly>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.Editor("Country", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                </div>
                                                @Html.Label("Create By", htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.Editor("CreateBy", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SCRMA, htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.Editor("SCRMA", new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                </div>
                                                @Html.Label("Received Date", htmlAttributes: new { @class = "control-label col-sm-1" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @{
                                                        var ReceivedDate = Model.RMASKU.Where(x => x.IsEnable).OrderByDescending(x=>x.ReceivedAt).FirstOrDefault()?.ReceivedAt?.ToLocalTime();
                                                        <input class="form-control" type="text" value="@ReceivedDate" readonly>
                                                    }
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.Label("Received By", htmlAttributes: new { @class = "control-label col-sm-1  col-sm-offset-3" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @{
                                                        var ReceivedBy = Model.RMASKU.Where(x => x.IsEnable).OrderByDescending(x => x.ReceivedAt).FirstOrDefault()?.ReceivedBy;
                                                        <input class="form-control" type="text" value="@ReceivedBy" readonly>
                                                    }
                                                </div>
                                            </div>
                                        </fieldset>
                                        <fieldset>
                                            <legend></legend>
                                            <div class="form-group">
                                                <div class="col-sm-9 col-lg-2">
                                                    @if (Model.Status != "Closed")
                                                    {
                                                        <button type="button" id="Edititems">Edit items</button>
                                                        <button type="button" id="Removeitems">Remove items</button>
                                                    }
                                                </div>
                                            </div>
                                            <div class="row">
                                                <article class="col-xs-12">
                                                    <table id="DataGridC" class="table table-striped table-bordered">
                                                        <thead>
                                                            <tr>
                                                                <th><input type="checkbox" /></th>
                                                                <th>SKU</th>
                                                                <th>Product Name</th>
                                                                <th>UPC / EAN</th>
                                                                <th>訂單數</th>
                                                                <th>原因</th>
                                                                <th>Return Warehouse</th>
                                                                <th>Serial</th>
                                                                <th>實際收貨倉</th>
                                                                <th></th>
                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                        </tbody>
                                                        <tfoot>
                                                            <tr>
                                                                <td colspan="10"></td>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="8" rowspan="9">
                                                                    <div class="col-sm-10 col-lg-8">
                                                                        <textarea rows="20" style="width:100%" id="textnote"></textarea>
                                                                        <button type="button" id="addnote" style="float:right" class="btn btn-default btn-sm">Add Note</button>
                                                                        <span style="float:right">　</span>
                                                                        <button type="button" id="UploadImage" style="float:right" class="btn btn-default btn-sm">Upload Image</button>
                                                                        <input type="file" id="addimg" style="float:right" />
                                                                    </div>
                                                                    <div class="col-sm-2 col-lg-4">
                                                                        <ul style="list-style-type:none;list-style-position: inside;padding-left: 0px;padding-left: 0px;" id="textnotelog">
                                                                            @*@foreach (var item in Model.PurchaseNote.OrderByDescending(x => x.ID))
        {
            <li>
                <fieldset>
                    <legend>
                        @if (item.NoteType == "Url")
                        {
                            <a class="aimg" href="@item.Note" data-lightbox="roadtrip"><img class="img" src="@item.Note" /></a>
                        }
                        else
                        {
                            @item.Note
                        }

                        <br />
                        @( item.CreateAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss") + "；" + item.CreateBy)
                    </legend>
                </fieldset>
            </li>
        }*@
                                                                        </ul>
                                                                    </div>
                                                                </td>
                                                                <td colspan="2">Refund Statement</td>
                      
                                                            </tr>
                                                            <tr>
                                                                <td>Item value:</td>
                                                                <td>
                                                                    @*@(Model.RMASKU.Where(x=>x.IsEnable).Sum(x=>x.UnitPrice)?.ToString("###,##0.##"))*@
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Shipping charge:</td>
                                                                <td>
                                                                    @((Model.FinalShippingFee?? 0).ToString("###,##0.##"))
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Restocking fee:</td>
                                                                <td>
                                                                   @Html.EditorFor(x=>x.RestockingFee, new { htmlAttributes = new { @class = "form-control changed" } })
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Return shipping cost:</td>
                                                                <td>
                                                                    @Html.EditorFor(x => x.ReturnShippingCos, new { htmlAttributes = new { @class = "form-control changed" } })
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Other costs:</td>
                                                                <td>
                                                                    @Html.EditorFor(x => x.OtherCosts, new { htmlAttributes = new { @class = "form-control changed" } })
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Total refund:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Order balance:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Apply Refund</td>
                                                                <td>Save</td>
                                                            </tr>
                                                        </tfoot>
                                                    </table>
                                                </article>
                                            </div>
                                        </fieldset>
                                    </div>
                                </div>
                                <div class="widget-footer">
                                    @if (Model.Status != "Closed")
                                    {
                                        <button type="submit" class="btn btn-primary" id="save">儲存</button>
                                    }
                                    <button type="button" class="btn btn-default" onclick="location.href='@Url.Action("Index")'">返回</button>

                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
@section pagespecific {
    <script type="text/javascript">
        var hash = window.location.hash;
        $('ul.nav-tabs li').eq(hash.substr(1)).addClass('active');
        $('.tab-pane').eq(hash.substr(1)).addClass('active');
        var DataGrid;
        var tableID = "#DataGridC";
        $(document).ready(function () {
            DataGrid = $(tableID).DataTable({
                fixedHeader: {
                    header: true,
                    footer: true
                },
                select: {
                    style: 'os',
                    selector: 'td:first-child'
                },
                columns: [
                    {
                        data: "ID",
                        className: 'select-checkbox',
                        orderable: false,
                        render: function (data, type, row, meta) {
                            var html = '<input type="checkbox" name="RMAList[' + meta.row + '].SKU" value="' + data + '">';
                            html += '<input type="hidden" name="RMAList[' + meta.row + '].ID" value="' + data + '">';
                            return html;
                        }
                    },
                    { data: "SKU" },
                    { data: "ProductName" },
                    { data: "UPCEAN" },
                    { data: "QTYOrdered" },
                    {
                        data: "Reason",
                        render: function (data, type, row, meta) {
                            var RMAReasonList = @Html.Raw(Json.Encode(RMAReasonList.Select(x => new SelectListItem { Text = x.Value, Value = x.Key.ToString() }).ToList().Select(x => new { x.Text, x.Value }).ToList()));
                            if (row.Model == "E" && "@Model.Status" != "Closed") {
                                var $select = $("<select></select>", {
                                    "id": "RMAList[" + meta.row + "].Reason",
                                    "name": "RMAList[" + meta.row + "].Reason",
                                    "class": "RMAReasonList",
                                    "value": data
                                });
                                $.each(RMAReasonList, function (k, val) {
                                    var $option = $("<option></option>", {
                                        "text": val.Text,
                                        "value": val.Value
                                    });
                                    if (data == val.Value) {
                                        $option.attr("selected", "selected")
                                    }
                                    $select.append($option);
                                });
                                return $select.prop("outerHTML");
                            }
                            else {
                                var text = "";
                                $.each(RMAReasonList, function (k, val) {
                                    if (data == val.Value) {
                                        text = val.Text;
                                    }
                                });
                                return text;
                            }
                        }
                    },
                    {
                        data: "Warehouse",
                        render: function (data, type, row, meta) {
                            var Warehouselist = @Html.Raw(Json.Encode(Warehouselist.Select(x => new { x.Text, x.Value }).ToList()));
                            if (row.Model == "E" && (row.SerialsNo == null || row.SerialsNo == "")) {
                                var $select = $("<select></select>", {
                                    "id": "RMAList[" + meta.row + "].Warehouse",
                                    "name": "RMAList[" + meta.row + "].Warehouse",
                                    "class": "Warehouselist",
                                    "value": data
                                });
                                $.each(Warehouselist, function (k, val) {
                                    var $option = $("<option></option>", {
                                        "text": val.Text,
                                        "value": val.Value
                                    });
                                    if (data == val.Value) {
                                        $option.attr("selected", "selected")
                                    }
                                    $select.append($option);
                                });
                                return $select.prop("outerHTML");
                            }
                            else {
                                var text = "";
                                $.each(Warehouselist, function (k, val) {
                                    if (data == val.Value) {
                                        text = val.Text;
                                    }
                                });
                                return text;
                            }
                        }
                    },
                    { data: "SerialsNo" },
                    {data: "TrWarehouse"},
                    {
                        data: "ID",
                        render: function (data, type, row, meta) {
                            return " <a href='@Url.Action("Returnedserials")?ID=" + data+"' class='btn btn-default btn-sm'>Receive returns</a>";
                        }
                    }
                ],
                ajax: {
                    traditional: true,
                    method: "get",//或post，自由決定，影響到Server端用FormCollection取值或Request.QueryString取得DataTables傳遞的資訊
                    url: "@Url.Action("GetEditSKUData")",
                    data: function (d) {
                        d.ID = @Model.ID;
                    },
                    dataSrc: function (json) {
                        if (json.success) {
                            return json.data;
                        } else {
                            alert(json.errmsg);
                            return "";
                        }
                    }
                },
                serverSide: true,//啟用ServerSide模式
                //deferLoading: 0, //初始化DataTable時，不發出ajax
                orderMulti: false,
                "paging": false,
                "ordering": false,
                "info": true,
                "searching": false,
                "footerCallback": function (row, data, start, end, display) {
                    var api = this.api(), data;
                    // Remove the formatting to get integer data for summation
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                                i : 0;
                    };

                    //Item value
                    var Itemvalue = 0;
                    data.forEach(function (e) {
                        Itemvalue += e.UnitPrice;
                    })
                    $('tr:eq(2) td:eq(1)', api.table().footer()).html(thousandComma(Itemvalue));
                    //Shipping charge
                    var Shippingcharge =@(Model.FinalShippingFee??0);
                    //Restocking fee:
                    var Restockingfee = intVal($("#RestockingFee").val());
                    //Return shipping cost
                    var Returnshippingcost = intVal($("#ReturnShippingCos").val());
                    //Other costs
                    var Othercosts = intVal($("#OtherCosts").val());
                    //Total refund
                    var Totalrefund = Itemvalue - Shippingcharge + Restockingfee;
                    $('tr:eq(7) td:eq(1)', api.table().footer()).html(thousandComma(Totalrefund));
                    //Order balance
                    var Orderbalance = Itemvalue + Shippingcharge + Totalrefund - Returnshippingcost - Othercosts;
                    $('tr:eq(8) td:eq(1)', api.table().footer()).html(thousandComma(Orderbalance));
                }
            });
            $("#btnsearch").click(function () {
                DataGrid.draw();
            });
            $(".changed").change(function () {
                DataGrid.draw();
            });
            $(tableID + ' tbody').on('click', 'td.details-control', function () {
                var tr = $(this).closest('tr');
                var row = DataGrid.row(tr);
                if (row.child.isShown()) {
                    // This row is already open - close it
                    row.child.hide();
                    tr.removeClass('shown');
                }
                else {
                    // Open this row
                    var SKUid = $(this).attr("SKUid");
                    row.child(GetSerialList(SKUid)).show();
                    tr.addClass('shown');
                }
            });
            $("#Removeitems").on("click", function () {
                var dataList = [];
                $(DataGrid.$('input[type="checkbox"]:checked').each(function () {
                    dataList.push($(this).val());
                }));
                if (confirm("是否確定刪除")) {
                    $.ajax({
                        traditional: true,
                        type: "post",
                        url: "@Url.Action("RemoveData")",
                        data: {
                            IDList: dataList,
                            ID:@Html.Display("ID"),
                        },
                        success: function (data) {
                            if (data.status) {
                                $(tableID + ' thead input[type="checkbox"]').prop("checked", false);
                                DataGrid.draw();
                            }
                            else {
                                alert(data.Errmsg);
                                DataGrid.draw();
                            }
                        }
                    });
                }
            });
            $("#Edititems").on("click", function () {
                var dataList = [];
                $(DataGrid.$('input[type="checkbox"]:checked').each(function () {
                    dataList.push($(this).val());
                }));
                $.ajax({
                    traditional: true,
                    type: "post",
                    url: "@Url.Action("EditSKUData")",
                    data: {
                        IDList: dataList,
                        ID:@Html.Display("ID"),
                    },
                    success: function (data) {
                        if (data.status) {
                            $(tableID + ' thead input[type="checkbox"]').prop("checked", false);
                            DataGrid.draw();
                        }
                        else {
                            alert(data.Errmsg);
                        }
                    }
                });
            });
            $("body").on("change", ".RMAReasonList,.Warehouselist", function () {
                var tr = $(this).closest("tr");
                $(tr).children('td').css({ 'background-color': 'yellow' });
            });
        });
        function GetSerialList(ID) {
            var div = $('<div style="border:2px blue solid;" />').addClass('loading').text('Loading...');
            $.ajax({
                type: "post",
                url: "@Url.Action("GetSerialList")",
                data: {
                    ID: ID
                },
                success: function (data) {
                    if (data.status) {
                        div.html(data.partial).removeClass('loading');
                    }
                    else {
                        val = data.Errmsg;
                    }
                }
            });
            return div;
        }
    </script>
}
