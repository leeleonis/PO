@model Packages
@{
    var LangID = EnumData.DataLangList().First().Key;
    int itemIndex = 0, packageIndex = (int)ViewData["index"], packageTotal = (int)ViewData["total"];
    bool eBayOrder = Model.GetOrder.Channel.Equals((byte)EnumData.OrderChannel.eBay);

    bool ShippingSetting = MyHelps.CheckPageAuth("OrderEdit", "ShippingSetting", Session);
    bool EditSku = MyHelps.CheckPageAuth("OrderEdit", "EditSku", Session);
}
<div class="col-sm-12 no-padding" data-package="@Model.ID" data-qty="@Model.Items.Where(i => i.IsEnable).Sum(i => i.Qty)">
    @if (packageTotal > 1)
    {
        <legend>Package @string.Format("{0}/{1}", packageIndex, packageTotal)</legend>
    }
    @Html.Hidden("ID", Model.ID)
    <div class="col-sm-12">
        <ul class="nav nav-tabs">
            <li class="active">
                <a data-toggle="tab" href="#tab-shipping">Shipping</a>
            </li>
            <li>
                <a data-toggle="tab" href="#tab-exportSetting">Export Settings</a>
            </li>
            <li>
                <a data-toggle="tab" href="#tab-DLExportSetting">DL Export Settings</a>
            </li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="tab-shipping">
                <table class="table table-bordered">
                    <tr>
                        <td class="font-bg" width="130">Warehouse</td>
                        <td class="text" width="300">
                            <span>@Model.GetWarehouse.Name</span>
                            @Html.DropDownListFor(Model => Model.ShipWarehouse, (List<SelectListItem>)ViewData["WarehouseList"], htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                            <input type="hidden" name="ShipWarehouse" value="@Model.ShipWarehouse" />
                        </td>
                        <td class="font-bg" width="130">Carrier</td>
                        <td width="300">
                            <span>@Model.GetMethod.LastMile.Name</span>
                        </td>
                        <td class="font-bg" width="130">Fulfillment Date</td>
                        <td class="text" width="300">
                            <span>@(new TimeZoneConvert().DateTimeToString(Model.FulfillmentDate, EnumData.TimeZone.UTC, EnumData.TimeZone.TST))</span>
                        </td>
                    </tr>
                    <tr>
                        <td class="font-bg">Shipping Status</td>
                        <td>@Enum.GetName(typeof(EnumData.OrderShippingStatus), Model.ShippingStatus)</td>
                        <td class="font-bg">Tracking</td>
                        <td class="text">
                            <span>@(Model.Tracking ?? "")</span>
                            @Html.TextBoxFor(Model => Model.Tracking, htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                            <input type="hidden" name="Tracking" value="@Model.Tracking" />
                        </td>
                        <td colspan="2" rowspan="2"></td>
                    </tr>
                    <tr>
                        <td class="font-bg">Shipping Method</td>
                        <td class="text">
                            <span>@Model.GetMethod.Name</span>
                            @Html.DropDownListFor(Model => Model.ShippingMethod, (List<SelectListItem>)ViewData["MethodList"], htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                            <input type="hidden" name="ShippingMethod" value="@Model.ShippingMethod" />
                        </td>
                        <td class="font-bg">
                            Upload Tracking
                            @if (Model.ShippingStatus.Equals((byte)EnumData.OrderShippingStatus.未安排))
                            {
                                <div style="position: absolute; top: 0px; right: 14px;">
                                    <button type="button" class="btn btn-default btn-sm edit" onclick="PackageEdit(@Model.ID)">Edit</button>
                                    <button type="button" class="btn btn-default btn-sm save" onclick="PackageReset(@Model.ID)">Reset</button>
                                    <button type="button" class="btn btn-default btn-sm save" onclick="PackageSave(@Model.ID)">Save</button>
                                </div>
                            }
                        </td>
                        <td class="text">
                            <span>@Enum.GetName(typeof(EnumData.YesNo), Model.UploadTracking)</span>
                            @Html.DropDownListFor(Model => Model.UploadTracking, Enum.GetValues(typeof(EnumData.YesNo)).Cast<EnumData.YesNo>().Select(s => new SelectListItem() { Text = s.ToString(), Value = (byte)s == 1 ? bool.TrueString : bool.FalseString }), htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                            <input type="hidden" name="UploadTracking" value="@Model.UploadTracking" />
                        </td>
                    </tr>
                </table>
            </div>
            <div class="tab-pane" id="tab-exportSetting">
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <td class="font-bg" width="130">Export</td>
                            <td class="text" width="300">
                                <span>@Enum.GetName(typeof(EnumData.Export), Model.Export)</span>
                                @Html.DropDownListFor(Model => Model.Export, Enum.GetValues(typeof(EnumData.Export)).Cast<EnumData.Export>().Select(s => new SelectListItem() { Text = s.ToString(), Value = ((byte)s).ToString() }), htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                                <input type="hidden" name="Export" value="@Model.Export" />
                            </td>
                            <td class="font-bg" width="130">Export Currency</td>
                            <td id="text-currency" width="300">
                                @Model.GetCurrency.Code
                                @*@Html.DropDownListFor(Model => Model.ExportCurrency, (List<SelectListItem>)ViewData["CurrencyList"], htmlAttributes: new { @class = "form-control" })*@
                            </td>
                            <td colspan="2" rowspan="3"></td>
                        </tr>
                        <tr>
                            <td class="font-bg">Export Method</td>
                            <td class="text">
                                <span>@EnumData.ExportMethodList()[Model.ExportMethod]</span>
                                @Html.DropDownListFor(Model => Model.ExportMethod, EnumData.ExportMethodList().Select(s => new SelectListItem() { Text = s.Value, Value = s.Key.ToString() }), htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                                <input type="hidden" name="ExportMethod" value="@Model.ExportMethod" />
                            </td>
                            <td colspan="2" rowspan="2"></td>
                        </tr>
                        <tr>
                            <td class="font-bg">Export Value</td>
                            <td class="text">
                                <span>@Model.ExportValue</span>
                                @Html.TextBoxFor(Model => Model.ExportValue, htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                                <input type="hidden" name="ExportValue" value="@Model.ExportValue" />
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="tab-pane" id="tab-DLExportSetting">
                <table class="table table-bordered">
                    <tbody>
                        <tr>
                            <td class="font-bg" width="130">Export</td>
                            <td class="text" width="300">
                                <span>@Enum.GetName(typeof(EnumData.Export), Model.DLExport)</span>
                                @Html.DropDownListFor(Model => Model.DLExport, Enum.GetValues(typeof(EnumData.Export)).Cast<EnumData.Export>().Select(s => new SelectListItem() { Text = s.ToString(), Value = ((byte)s).ToString() }), htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                                <input type="hidden" name="DLExport" value="@Model.DLExport" />
                            </td>
                            <td class="font-bg" width="130">Export Currency</td>
                            <td width="300">
                                @(Model.GetDLCurrency.Code)
                                @*@Html.DropDownListFor(Model => Model.DLExportCurrency, (List<SelectListItem>)ViewData["CurrencyList"], htmlAttributes: new { @class = "form-control" })*@
                            </td>
                            <td class="font-bg" width="130">Tracking</td>
                            <td class="text" width="300">
                                <span>@(Model.DLTracking ?? "")</span>
                                @Html.TextBoxFor(Model => Model.DLTracking, htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                                <input type="hidden" name="DLTracking" value="@Model.DLTracking" />
                            </td>
                        </tr>
                        <tr>
                            <td class="font-bg">Export Method</td>
                            <td class="text">
                                <span>@EnumData.ExportMethodList()[Model.DLExportMethod]</span>
                                @Html.DropDownListFor(Model => Model.DLExportMethod, EnumData.ExportMethodList().Select(s => new SelectListItem() { Text = s.Value, Value = s.Key.ToString() }), htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                                <input type="hidden" name="DLExportMethod" value="@Model.DLExportMethod" />
                            </td>
                            <td class="font-bg" width="132">Box ID</td>
                            <td class="text">
                                <span>@Model.CarrierBox</span>
                            </td>
                            <td colspan="2" rowspan="2"></td>
                        </tr>
                        <tr>
                            <td class="font-bg">Export Value</td>
                            <td class="text">
                                <span>@Model.DLExportValue</span>
                                @Html.TextBoxFor(Model => Model.DLExportValue, htmlAttributes: new { @class = "form-control", @disabled = !ShippingSetting ? "disabled" : "" })
                                <input type="hidden" name="DLExportValue" value="@Model.DLExportValue" />
                            </td>
                            <td class="font-bg">Carrier</td>
                            <td class="text">
                                @(Model.GetMethod?.FirstMile?.Name ?? "")
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="col-sm-12">
        <table class="table table-bordered text-center">
            <thead>
                <tr style="font-weight:bold;">
                    <td class="font-bg" width="130">
                        <div>
                            <label class="checkbox" style="padding: 0px; min-height: 17px;">
                                <input type="checkbox" id="chk-package" value="@Model.ID" />
                                <i></i>SKU
                            </label>
                        </div>
                    </td>
                    <td class="font-bg" width="120">Listing ID</td>
                    <td class="font-bg">Product Name</td>
                    <td class="font-bg" width="150">Serials</td>
                    <td class="font-bg" width="80">Unit Price</td>
                    <td class="font-bg" width="95">Export Value</td>
                    <td class="font-bg" width="115">DL Export Value</td>
                    <td class="font-bg" width="50">QTY</td>
                    <td class="font-bg" width="100">Value</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Items.Where(i => i.IsEnable))
                {
                    @Html.Hidden(string.Format("Items[{0}][ID]", itemIndex), item.ID);
                    <tr data-item="@item.ID">
                        <td class="text">
                            <span><a href="@Url.Action("Edit", "Sku", new { ID = item.Sku })" target="_blank">@item.Sku</a></span>
                            @Html.TextBox(string.Format("Items[{0}][Sku]", itemIndex), item.Sku, htmlAttributes: new { @class = "form-control", @disabled = !EditSku ? "disabled" : "" })
                            <input type="hidden" name="Sku" value="@item.Sku" />
                        </td>
                        <td>
                            @if (eBayOrder)
                            {
                                <a href='https://www.ebay.com/itm/@item.eBayItemID' target='_blank'>@item.eBayItemID</a>
                            }
                            else
                            {
                                Write(item.eBayItemID);
                            }
                        </td>
                        <td>@(item.GetSku.SkuLang.FirstOrDefault(l => l.LangID.Equals(LangID))?.Name ?? "")</td>
                        <td class="text" style="@(!item.Serials.Any() ? "padding:0;" : "")">
                            @{
                                var Serial = "";
                                if (item.Serials.Any())
                                {
                                    Serial = string.Join(",", item.Serials.Select(s => s.SerialNumber).ToArray());
                                    if (item.Serials.Count() > 1)
                                    {
                                        <span rel="popover" data-placement="top" data-html="true" data-content="@string.Join("<br />", item.Serials.Select(s => s.SerialNumber).ToArray())" style="cursor:pointer;">Multi</span>
                                    }
                                    else
                                    {
                                        <span>@Serial</span>
                                    }
                                }
                            }
                            @Html.TextBox(string.Format("Items[{0}][SerialEdit]", itemIndex), Serial, htmlAttributes: new { @class = "form-control", @disabled = !EditSku ? "disabled" : "" })
                            <input type="hidden" name="SerialEdit" value="@Serial" />
                        </td>
                        <td>@item.UnitPrice</td>
                        <td class="text">
                            <span>@item.ExportValue</span>
                            @Html.TextBox(string.Format("Items[{0}][ExportValue]", itemIndex), item.ExportValue, htmlAttributes: new { @class = "form-control", @disabled = !EditSku ? "disabled" : "" })
                            <input type="hidden" name="ExportValue" value="@item.ExportValue" />
                        </td>
                        <td class="text">
                            <span>@item.DLExportValue</span>
                            @Html.TextBox(string.Format("Items[{0}][DLExportValue]", itemIndex), item.DLExportValue, htmlAttributes: new { @class = "form-control", @disabled = !EditSku ? "disabled" : "" })
                            <input type="hidden" name="DLExportValue" value="@item.DLExportValue" />
                        </td>
                        <td class="text">
                            <span>@item.Qty</span>
                            @Html.TextBox(string.Format("Items[{0}][Qty]", itemIndex++), item.Qty, htmlAttributes: new { @class = "form-control", @disabled = !EditSku ? "disabled" : "" })
                            <input type="hidden" name="Qty" value="@item.Qty" />
                        </td>
                        <td>@(item.UnitPrice * item.Qty)</td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="form-group">
            @if (MyHelps.CheckPageAuth("OrderEdit", "MarkShipped", Session))
            {
                if (Model.ShippingStatus.Equals((byte)EnumData.OrderShippingStatus.未安排) && Model.GetOrder.OrderStatus.Equals((byte)EnumData.OrderStatus.InProcess) && (Model.GetOrder.PaymentStatus.Equals((byte)EnumData.OrderPaymentStatus.Full) || Model.GetOrder.PaymentStatus.Equals((byte)EnumData.OrderPaymentStatus.OverPaid)))
                {
                    <div class="col-sm-12 text-center">
                        <button type="button" class="btn btn-default btn-lg" onclick="if (confirm('確定要Mark Ship?')) { PackageMarkShip(@Model.ID); }">Mark Ship</button>
                    </div>
                }
            }
        </div>
    </div>
</div>
