@model SKU
@section styles{
    <link href="~/Scripts/plugin/ckeditor/skins/moono/editor.css" rel="stylesheet" />
    <link href="~/Content/themes/default/easyui.css" rel="stylesheet" />
    <link href="~/Content/themes/icon.css" rel="stylesheet" />
    <style>
        table tr td {
            vertical-align: middle !important;
        }
    </style>
}
@{
    string LangID = (string)ViewBag.LangID;
    string DefaultLangID = EnumData.DataLangList().First().Key;
    var WarehouseList = (List<Warehouse>)ViewBag.WarehouseList;
    var PurchaseSku = (List<PurchaseSKU>)ViewBag.PurchaseSku;
    var RMASku = (List<RMASKU>)ViewBag.RMASku;
    var AwaitingList = (List<AwaitingDispatchVM>)ViewBag.AwaitingList;
    var SkuStatus = Enum.GetValues(typeof(EnumData.SkuStatus)).Cast<EnumData.SkuStatus>().Select(t => new SelectListItem() { Text = t.ToString(), Value = ((byte)t).ToString() }).ToList();
}
<div id="content">
    @if (TempData["ErrorMsg"] != null)
    {
        <div class="row">
            <div class="col-sm-12">
                <div class="alert alert-danger fade in">
                    <button class="close" data-dismiss="alert">×</button>
                    <i class="fa-fw fa fa-times"></i>
                    @TempData["ErrorMsg"].ToString()
                </div>
            </div>
        </div>
    }

    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-xs-12">
                <div class="jarviswidget" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-sortable="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>

                        <h2>Edit</h2>
                        <ul class="nav nav-tabs pull-right">
                            <li><a data-toggle="tab" href="#hb1">Summary</a></li>
                            <li><a data-toggle="tab" href="#hb2">Attribute</a></li>
                            <li><a data-toggle="tab" href="#hb3">Editor</a></li>
                            <li><a data-toggle="tab" href="#hb4">Picture</a></li>
                            <li><a data-toggle="tab" href="#hb5">Price</a></li>
                            <li><a data-toggle="tab" href="#hb6">Logistics</a></li>
                            <li><a data-toggle="tab" href="#hb7">Purchasing</a></li>
                            <li><a data-toggle="tab" href="#hb8">Inventory</a></li>
                            <li><a data-toggle="tab" href="#hb9">Statement</a></li>
                        </ul>
                    </header>

                    <div>
                        <div class="widget-body no-padding">
                            <form id="data-form" class="form-horizontal" method="post" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                <div id="content" class="tab-content">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @Html.Hidden("Sync", false)
                                    <div class="form-group">
                                        <div class="col-sm-12 col-lg-6 no-padding">
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SkuLang.First().LangID, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8 col-lg-4">
                                                    @Html.DropDownList("LangID", (IEnumerable<SelectListItem>)ViewBag.LangList, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Company, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8 col-lg-4">
                                                    @Html.DropDownListFor(model => model.Company, null, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SkuID, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8 col-lg-6">
                                                    @Html.EditorFor(model => model.SkuID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                    @Html.ValidationMessageFor(model => model.SkuID, "", new { @class = "text-danger" })
                                                    @Html.Hidden("Sku", Model.SkuID)
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SkuLang.First().Name, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8">
                                                    @Html.EditorFor(model => model.SkuLang.First(l => l.LangID.Equals(LangID)).Name, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.SkuLang.First().Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.EAN, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8">
                                                    @Html.EditorFor(model => model.EAN, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.EAN, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.UPC, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8">
                                                    @Html.EditorFor(model => model.UPC, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.UPC, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-sm-12 col-lg-6 no-padding">
                                            <div class="form-group"></div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8 col-lg-4">
                                                    @Html.DropDownList("Status", SkuStatus, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Replenishable, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8">
                                                    @Html.BooleanSwitch("Replenishable", Model.Replenishable)
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SerialTracking, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8">
                                                    @Html.BooleanSwitch("SerialTracking", Model.SerialTracking)
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Battery, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                <div class="col-sm-8">
                                                    @Html.BooleanSwitch("Battery", Model.Battery)
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="tab-pane" id="hb1">
                                        <fieldset>
                                            <legend>Summary</legend>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownList("Type", (List<SelectListItem>)ViewBag.TypeList, htmlAttributes: new { @class = "form-control" })
                                                </div>

                                                @Html.LabelFor(model => model.DisplayPageUrl, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-offset-1" })
                                                <div class="col-sm-9 col-lg-4">
                                                    @Html.TextBox("DisplayPageUrl", Model.DisplayPageUrl, new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.DisplayPageUrl, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            @if (!Model.Type.Equals((byte)EnumData.SkuType.Variation))
                                            {
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ParentSku, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-3">
                                                        <div class="input-group">
                                                            @Html.EditorFor(model => model.ParentSku, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                            <div class="input-group-btn">
                                                                <button class="btn btn-default" type="button" id="btn-parent">
                                                                    Search
                                                                </button>
                                                            </div>
                                                            @Html.ValidationMessageFor(model => model.ParentSku, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                            }

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Condition, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListFor(model => model.Condition, null, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListFor(model => model.Category, null, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListFor(model => model.Brand, null, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SkuLang.First().Model, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-3">
                                                    @Html.TextBox("Model", Model.SkuLang.First(l => l.LangID.Equals(LangID)).Model ?? "", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.SkuLang.First().Model, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </fieldset>

                                        <fieldset class="smart-form form-group">
                                            <header>eBay Title</header>
                                            <fieldset>
                                                @{
                                                    int i = 0;
                                                    Dictionary<int, string> eBayTitle = !string.IsNullOrEmpty(Model.eBayTitle) ? JsonConvert.DeserializeObject<Dictionary<int, string>>(Model.eBayTitle) : new Dictionary<int, string> { };
                                                    foreach (var title in EnumData.eBayTitle())
                                                    {
                                                        <section class="col col-sm-6 col-lg-4">
                                                            @Html.Label(title.Value)
                                                            <label class="input">
                                                                @{ string name = string.Format("eBayTitle[{0}]", i++); }
                                                                @Html.Hidden(string.Format("{0}[{1}]", name, "misc"), title.Key)
                                                                @Html.TextBox(string.Format("{0}[{1}]", name, "title"), eBayTitle.ContainsKey(title.Key) ? eBayTitle[title.Key] : "")
                                                            </label>
                                                        </section>
                                                    }
                                                }
                                            </fieldset>
                                        </fieldset>

                                        @if (Model.Type.Equals((byte)EnumData.SkuType.Variation))
                                        {
                                            <fieldset id="Variation">
                                                <legend>Variation</legend>

                                                <div class="col-sm-8">
                                                    <div class="table-responsive col-sm-12">
                                                        <table class="table table-bordered table-striped text-center">
                                                            <thead>
                                                                <tr>
                                                                    <th width="150" class="text-center">Sku</th>
                                                                    <th class="text-center">Name</th>
                                                                    <th width="250" class="text-center">Attribute Name</th>
                                                                    <th width="" class="text-center">Attribute Value</th>
                                                                    <th width="50"><button type="button" class="btn btn-default btn-sm" onclick="AttrAdd();">+</button></th>
                                                                </tr>
                                                            </thead>

                                                            <tbody id="list-variation"></tbody>
                                                        </table>
                                                    </div>
                                                </div>

                                                <div class="col-sm-2 col-sm-offset-1">
                                                    <table class="table table-bordered table-striped text-center">
                                                        <thead>
                                                            <tr>
                                                                <td>Choose Attribute</td>
                                                                <td width="50">
                                                                    @if (!Model.Sku_Attribute.Any(a => a.IsDiverse))
                                                                    {
                                                                        <button type="button" class="btn btn-default btn-sm" onclick="TypeAdd();">+</button>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        </thead>
                                                        <tbody id="list-attributeType">
                                                            @{
                                                                List<SkuAttributeLang> attributeList = new List<SkuAttributeLang>();
                                                                if (!Model.Sku_Attribute.Any(a => a.IsDiverse))
                                                                {
                                                                    using (StockKeepingUnit SKU = new StockKeepingUnit(Model.SkuID))
                                                                    {
                                                                        var skuAttributeList = SKU.CompareVariationSku();
                                                                        if (skuAttributeList.Any())
                                                                        {
                                                                            attributeList = skuAttributeList.OrderBy(a => a.AttrID).SelectMany(a => a.SkuAttribute.SkuAttributeLang).Distinct().ToList();
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    attributeList = Model.Sku_Attribute.Where(a => a.IsDiverse).OrderBy(a => a.AttrID).SelectMany(a => a.SkuAttribute.SkuAttributeLang).Distinct().ToList();
                                                                }

                                                                foreach (var attrLang in attributeList.GroupBy(l => l.AttrID))
                                                                {
                                                                    <tr><td colspan="2"><span>@(attrLang.First(l => l.LangID.Equals(attrLang.Any(ll => ll.LangID.Equals(LangID)) ? LangID : DefaultLangID)).Name)</span><input type="hidden" name="DiverseAttribute[]" value="@attrLang.Key" /></td></tr>
                                                                }
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </fieldset>
                                        }

                                        @if (Model.Type.Equals((byte)EnumData.SkuType.Kit))
                                        {
                                            <fieldset>
                                                <legend>Kit SKU</legend>

                                                <div class="col-sm-8">
                                                    <div class="table-responsive col-sm-12">
                                                        <table class="table table-bordered table-striped text-center">
                                                            <thead>
                                                                <tr>
                                                                    <th width="200" class="text-center">Sku</th>
                                                                    <th class="text-center">Name</th>
                                                                    <th width="100" class="text-center">Qty</th>
                                                                    <th width="50"><button type="button" class="btn btn-default btn-sm" onclick="KitAdd();">+</button></th>
                                                                </tr>
                                                            </thead>

                                                            <tbody id="list-kit"></tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </fieldset>
                                        }

                                        <fieldset class="">
                                            <div class="form-group col-sm-6">
                                                <legend>Package Content</legend>

                                                <div class="col-sm-12 col-lg-10">
                                                    <div class="table-responsive col-sm-12">
                                                        <table class="table table-bordered table-striped text-center">
                                                            <thead>
                                                                <tr>
                                                                    <th width="45%" class="text-center">Content</th>
                                                                    <th width="45%" class="text-center">Model</th>
                                                                    <th width="10%" class="text-center">Html</th>
                                                                </tr>
                                                            </thead>

                                                            <tbody id="list-content"></tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group col-sm-6">
                                                <legend>Key Features</legend>

                                                <div class="col-sm-12 col-lg-10">
                                                    <div class="table-responsive col-sm-12">
                                                        <table class="table table-bordered table-striped text-center">
                                                            <tbody id="list-feature"></tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                            </div>
                                        </fieldset>

                                        <fieldset class="">
                                            <legend>Shadows</legend>

                                            <div class="col-sm-12 col-lg-6">
                                                <div class="table-responsive col-sm-12">
                                                    <table class="table table-bordered table-striped text-center">
                                                        <thead>
                                                            <tr>
                                                                <th width="50%" class="text-center">Company</th>
                                                                <th width="50%" class="text-center">SKU</th>
                                                            </tr>
                                                        </thead>

                                                        <tbody>
                                                            @foreach (var company in (List<Company>)ViewBag.CompanyList)
                                                            {
                                                                <tr>
                                                                    <td>@company.Name</td>
                                                                    <td>@string.Format("{0}{1}", Model.SkuID, company.ShadowSuffix)</td>
                                                                </tr>
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </fieldset>

                                        <fieldset class="">
                                            <legend>Linked</legend>

                                        </fieldset>
                                    </div>

                                    <div class="tab-pane" id="hb2">
                                        <fieldset id="list-attribute"></fieldset>
                                    </div>

                                    <div class="tab-pane" id="hb3">
                                        <fieldset>
                                            <legend>Description</legend>

                                            @if (!string.IsNullOrEmpty(Model.ParentSku))
                                            {
                                                <div class="alert alert-warning fade in">
                                                    <button class="close" data-dismiss="alert">
                                                        ×
                                                    </button>
                                                    <i class="fa-fw fa fa-warning"></i>
                                                    <strong>Warning</strong> This is a Variation Child! Only the Description in the Variation Parent will be used instead
                                                </div>
                                            }

                                            @Html.TextArea("Description")
                                        </fieldset>

                                        <hr />

                                        <fieldset>
                                            <legend>Package Content</legend>

                                            @if (!string.IsNullOrEmpty(Model.ParentSku))
                                            {
                                                <div class="alert alert-warning fade in">
                                                    <button class="close" data-dismiss="alert">
                                                        ×
                                                    </button>
                                                    <i class="fa-fw fa fa-warning"></i>
                                                    <strong>Warning</strong> This is a Variation Child! Only the Package Content in the Variation Parent will be used instead
                                                </div>
                                            }

                                            <div class="form-group">
                                                <div class="col-lg-12">
                                                    <button type="button" class="btn btn-default" onclick="ResetPackageContent()">屬性重置</button>
                                                </div>
                                            </div>

                                            @Html.TextArea("PackageContent")
                                        </fieldset>

                                        <hr />

                                        <fieldset>
                                            <legend>Feature</legend>

                                            <div class="form-group">
                                                <div class="col-lg-12">
                                                    <button type="button" class="btn btn-default" onclick="ResetFeatureContent()">屬性重置</button>
                                                </div>
                                            </div>

                                            @Html.TextArea("FeatureContent")
                                        </fieldset>

                                        <hr />

                                        <fieldset>
                                            <legend>Specification</legend>

                                            <div class="form-group">
                                                <div class="col-lg-12">
                                                    <button type="button" class="btn btn-default" onclick="ResetSpecContent()">屬性重置</button>
                                                </div>
                                            </div>

                                            @Html.TextArea("SpecContent")
                                        </fieldset>
                                    </div>

                                    <div class="tab-pane" id="hb4">
                                        <fieldset>
                                            <legend>Main Picture</legend>

                                            <div class="form-group">
                                                <label class="col-md-2 control-label">Main Picture</label>

                                                <div class="col-md-10">
                                                    <input type="file" class="btn btn-default" name="picture">

                                                    <p class="help-block">圖檔大小不能超過 4MB</p>

                                                    <p class="help-block">
                                                        @if (Model.SkuPicture.Any(p => p.IsMain))
                                                        {
                                                            <img src="@string.Format("/Uploads/Sku/{0}/{1}", Model.SkuID, Model.SkuPicture.First(p => p.IsMain).FileName)" style="max-height:300px;" />
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                        </fieldset>

                                        <fieldset>
                                            <legend>Picture List</legend>

                                            <div class="jarviswidget jarviswidget-color-blueLight" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-collapsed="false" data-widget-sortable="false">
                                                <header class="ui-sortable-handle">
                                                    <span class="widget-icon"> <i class="fa fa-photo"></i> </span>
                                                    <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                                                </header>

                                                <!-- widget div-->
                                                <div>
                                                    <!-- widget content -->
                                                    <div class="widget-body">
                                                        <div class="dz-clickable" id="mydropzone"></div>
                                                    </div>
                                                    <!-- end widget content -->
                                                </div>
                                                <!-- end widget div -->

                                            </div>
                                        </fieldset>
                                    </div>

                                    <div class="tab-pane" id="hb5">
                                        <fieldset>
                                            <legend>Price</legend>

                                            <div class="col-lg-10 col-lg-offset-1">
                                                <div class="table-responsive col-sm-12">
                                                    <table class="table table-bordered table-striped text-center">
                                                        <thead>
                                                            <tr>
                                                                <th width="80" class="text-center">Used</th>
                                                                <th class="text-center">Marketplace</th>
                                                                <th width="150" class="text-center">Item ID</th>
                                                                <th width="200" class="text-center">Company</th>
                                                                <th width="150" class="text-center">Account ID</th>
                                                                <th width="120" class="text-center">Currency</th>
                                                                <th width="120" class="text-center">Current Price</th>
                                                                <th width="120" class="text-center">Manual</th>
                                                                <th width="80" class="text-center">Max</th>
                                                                <th width="80" class="text-center">Min</th>
                                                            </tr>
                                                        </thead>
                                                        <tfoot></tfoot>
                                                        <tbody>
                                                            @{
                                                                int priceIndex = 0;
                                                                var priceGroup = Model.PriceGroup.ToList();
                                                                foreach (var market in (List<Marketplace>)ViewBag.MarketList)
                                                                {
                                                                    string name = string.Format("PriceGroup[{0}]", priceIndex++);
                                                                    var price = priceGroup.FirstOrDefault(p => p.Marketplace.Value.Equals(market.ID));
                                                                    <tr>
                                                                        @Html.Hidden(name + "[ID]", price?.ID ?? 0)
                                                                        @Html.Hidden(name + "[Sku]", price?.Sku ?? Model.SkuID)
                                                                        @Html.Hidden(name + "[Marketplace]", price?.Marketplace ?? market.ID)
                                                                        <td class="no-padding">@Html.BooleanSwitch(name + "[IsUsed]", price?.IsUsed ?? false)</td>
                                                                        <td>@market.FullName</td>
                                                                        <td class="no-padding">@Html.TextBox(name + "[ItemID]", price?.ItemID ?? "", new { @class = "form-control" })</td>
                                                                        <td>@(market.Company?.Name ?? "")</td>
                                                                        <td>@(market.Company != null ? (!string.IsNullOrEmpty(market.Company.eBayAccountID) ? market.Company.eBayAccountID : market.Company.AmazonAccountID) : "")</td>
                                                                        <td>@(market.Currency?.Code ?? "")</td>
                                                                        <td>@(price?.CurrentPrice ?? 0)</td>
                                                                        <td class="no-padding">@Html.TextBox(name + "[Price]", price?.Price ?? 0, new { @class = "form-control" })</td>
                                                                        <td class="no-padding">@Html.TextBox(name + "[Max]", price?.Max ?? 0, new { @class = "form-control" })</td>
                                                                        <td class="no-padding">@Html.TextBox(name + "[Min]", price?.Min ?? 0, new { @class = "form-control" })</td>
                                                                    </tr>
                                                                }
                                                            }
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </fieldset>
                                    </div>

                                    <div class="tab-pane" id="hb6">
                                        <fieldset>
                                            <legend>Weight & Dimensions</legend>
                                            <div class="form-group">
                                                <div class="col-sm-12 col-lg-6 no-padding">
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.Logistic.Price, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-9 col-lg-3">
                                                            @Html.TextBox("Logistic[Price]", Model.Logistic?.Price ?? 0, new { @class = "form-control" })
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.Logistic.OriginCountry, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-9 col-lg-3">
                                                            @Html.TextBox("Logistic[OriginCountry]", Model.Logistic?.OriginCountry ?? "", new { @class = "form-control" })
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.Logistic.CaseWidth, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            <div class="row">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        @Html.EditorFor(model => model.Logistic.CaseWidth, new { htmlAttributes = new { @class = "form-control", @name = "Logistic[CaseWidth]", @id = "CaseWidth" } })
                                                                        <span class="input-group-addon">mm</span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control" id="CaseWidth-inch" readonly />
                                                                        <span class="input-group-addon">inch</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        @Html.LabelFor(model => model.Logistic.CaseLength, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            <div class="row">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        @Html.EditorFor(model => model.Logistic.CaseLength, new { htmlAttributes = new { @class = "form-control", @name = "Logistic[CaseLength]", @id = "CaseLength" } })
                                                                        <span class="input-group-addon">mm</span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control" id="CaseLength-inch" readonly />
                                                                        <span class="input-group-addon">inch</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        @Html.LabelFor(model => model.Logistic.CaseHeight, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            <div class="row">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        @Html.EditorFor(model => model.Logistic.CaseHeight, new { htmlAttributes = new { @class = "form-control", @name = "Logistic[CaseHeight]", @id = "CaseHeight" } })
                                                                        <span class="input-group-addon">mm</span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control" id="CaseHeight-inch" readonly />
                                                                        <span class="input-group-addon">inch</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        @Html.LabelFor(model => model.Logistic.CaseWeight, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            <div class="row">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        @Html.EditorFor(model => model.Logistic.CaseWeight, new { htmlAttributes = new { @class = "form-control", @name = "Logistic[CaseWeight]", @id = "CaseWeight" } })
                                                                        <span class="input-group-addon">g</span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control" id="CaseWeight-lbs" readonly />
                                                                        <span class="input-group-addon">lbs</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.Logistic.ShippingWidth, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            <div class="row">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        @Html.EditorFor(model => model.Logistic.ShippingWidth, new { htmlAttributes = new { @class = "form-control", @name = "Logistic[ShippingWidth]", @id = "ShippingWidth" } })
                                                                        <span class="input-group-addon">mm</span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control" id="ShippingWidth-inch" readonly />
                                                                        <span class="input-group-addon">inch</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        @Html.LabelFor(model => model.Logistic.ShippingLength, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            <div class="row">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        @Html.EditorFor(model => model.Logistic.ShippingLength, new { htmlAttributes = new { @class = "form-control", @name = "Logistic[ShippingLength]", @id = "ShippingLength" } })
                                                                        <span class="input-group-addon">mm</span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control" id="ShippingLength-inch" readonly />
                                                                        <span class="input-group-addon">inch</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        @Html.LabelFor(model => model.Logistic.ShippingHeight, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            <div class="row">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        @Html.EditorFor(model => model.Logistic.ShippingHeight, new { htmlAttributes = new { @class = "form-control", @name = "Logistic[ShippingHeight]", @id = "ShippingHeight" } })
                                                                        <span class="input-group-addon">mm</span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control" id="ShippingHeight-inch" readonly />
                                                                        <span class="input-group-addon">inch</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        @Html.LabelFor(model => model.Logistic.ShippingWeight, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            <div class="row">
                                                                <div class="col-sm-8">
                                                                    <div class="input-group">
                                                                        @Html.EditorFor(model => model.Logistic.ShippingWeight, new { htmlAttributes = new { @class = "form-control", @name = "Logistic[ShippingWeight]", @id = "ShippingWeight" } })
                                                                        <span class="input-group-addon">g</span>
                                                                    </div>
                                                                </div>
                                                                <div class="col-sm-4">
                                                                    <div class="input-group">
                                                                        <input type="text" class="form-control" id="ShippingWeight-lbs" readonly />
                                                                        <span class="input-group-addon">lbs</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <hr />
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.Logistic.BoxID, htmlAttributes: new { @class = "control-label col-sm-2 col-lg-4" })
                                                        <div class="col-sm-8">
                                                            @Html.DropDownListFor(model => model.Logistic.BoxID, (List<SelectListItem>)ViewBag.BoxTypeList, htmlAttributes: new { @class = "form-control", @name = "Logistic[BoxID]" })
                                                        </div>

                                                        <div id="boxData">

                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="col-sm-12 col-lg-5 col-lg-offset-1 no-padding">
                                                    <input type="file" class="btn btn-default" name="LogisticImg" multiple>

                                                    <p class="help-block">圖檔大小不能超過 4MB</p>

                                                    @foreach (var image in Model.SkuPicture.Where(p => p.PictureType.Equals("Logistic")))
                                                    {
                                                        <p class="help-block">
                                                            <img src="/Uploads/@image.FileName" style="max-width:80%;" />
                                                        </p>
                                                    }
                                                </div>
                                            </div>
                                        </fieldset>
                                    </div>

                                    @{
                                        var SCList = WarehouseList.SelectMany(w => w.WarehouseSummary.Where(ws => ws.IsEnable && ws.Type.Equals("SCID"))).ToDictionary(s => s.Val, s => s.WarehouseID);
                                        var TypeList = new Dictionary<string, string>() { { "PO", "PO" }, { "CM", "Credit Memo" }, { "Order", "Order Dispatch" }, { "TransferOut", "Transfer (Out)" }, { "TransferIn", "Transfer (In)" }, { "RMAIn", "RMA (In)" }, { "Change", "" } };
                                        var SerialList = PurchaseSku.SelectMany(sku => sku.SerialsLlist).Where(s => !(s.TransferSKUID.HasValue && (!s.TransferSKU.IsEnable || !s.TransferSKU.Transfer.IsEnable))).Select(s => new
                                        {
                                            SKU = s.PurchaseSKU.SkuNo,
                                            Date = s.CreateAt.ToLocalTime(),
                                            Supplier = s.PurchaseSKU.PurchaseOrder?.VendorLIst.Name ?? s.PurchaseSKU.CreditMemo?.PurchaseOrder.VendorLIst.Name,
                                            Type = s.SerialsType,
                                            ExtendID = (s.TransferSKU?.TransferID ?? s.OrderID ?? s.PurchaseSKU.PurchaseOrderID ?? s.PurchaseSKU.CreditMemoID).Value,
                                            WID = (s.TransferSKUID.HasValue ? (s.SerialsType.Equals("TransferIn") ? s.TransferSKU.Transfer.ToWID : s.TransferSKU.Transfer.FromWID) : s.PurchaseSKU.PurchaseOrder?.WarehouseID ?? s.PurchaseSKU.CreditMemo?.PurchaseOrder.WarehouseID).Value,
                                            Serial = s.SerialsNo,
                                            QTY = s.SerialsQTY.Value,
                                            Price = s.PurchaseSKU.Price ?? 0,
                                            Awaiting = s.SerialsType.Equals("TransferOut") && s.TransferSKU.Transfer.Status.Equals("Requested"),
                                            Shipped = s.SerialsType.Equals("TransferOut") && s.TransferSKU.Transfer.Status.Equals("Shipped") && !s.SerialsLlistC.Any(sl => sl.SerialsType.Equals("TransferIn")),
                                            RMA = false
                                        }).ToList();
                                        SerialList.AddRange(RMASku.SelectMany(sku => sku.RMASerialsLlist).Select(s => new
                                        {
                                            SKU = s.RMASKU.SkuNo,
                                            Date = s.CreateAt.ToLocalTime(),
                                            Supplier = SerialList.FirstOrDefault(ss => ss.ExtendID.Equals(s.RMASKU.RMA.OrderID.Value) && ss.SKU.Equals(s.RMASKU.SkuNo))?.Supplier ?? "",
                                            Type = s.SerialsType,
                                            ExtendID = s.RMASKU.RMA.ID,
                                            WID = s.RMASKU.WarehouseID.Value,
                                            Serial = s.SerialsNo,
                                            QTY = s.SerialsQTY.Value,
                                            Price = s.RMASKU.UnitPrice.Value,
                                            Awaiting = false,
                                            Shipped = s.SerialsType.Equals("TransferOut") && s.TransferSKU.Transfer.Status.Equals("Shipped") && !s.RMASerialsLlistC.Any(sl => sl.SerialsType.Equals("TransferIn")),
                                            RMA = true
                                        }).ToList());
                                        SerialList = SerialList.OrderByDescending(s => s.Date).ToList();
                                        var AwaitingConut = AwaitingList.Select(a => new { WID = SCList[a.SCID], QTY = a.QTY }).Concat(SerialList.Where(s => s.Awaiting).Select(s => new { WID = s.WID, QTY = Math.Abs(s.QTY) })).GroupBy(a => a.WID, a => a.QTY).ToDictionary(g => g.Key, g => g.Sum());
                                        var AggregateCount = SerialList.Where(s => !s.Awaiting).GroupBy(s => s.WID, s => !s.RMA ? s.QTY : 0).ToDictionary(g => g.Key, g => g.Sum() - (AwaitingConut.ContainsKey(g.Key) ? AwaitingConut[g.Key] : 0));
                                        var AvailableCount = SerialList.Where(s => !s.Awaiting).GroupBy(s => s.WID, s => s.QTY).ToDictionary(g => g.Key, g => g.Sum());
                                        var TransferCount = SerialList.Where(s => s.Shipped).GroupBy(s => s.WID, s => Math.Abs(s.QTY)).ToDictionary(g => g.Key, g => g.Sum());
                                        var TotalCount = SerialList.Where(s => !s.Awaiting || !s.Shipped).GroupBy(s => s.WID, s => s.QTY).ToDictionary(g => g.Key, g => g.Sum());
                                        var TotalValue = SerialList.Where(s => !s.Awaiting || !s.Shipped).GroupBy(s => s.WID, s => s.QTY * s.Price).ToDictionary(g => g.Key, g => g.Sum());
                                    }

                                    <div class="tab-pane" id="hb7">
                                        <fieldset>
                                            <legend>Purchase & Serial</legend>
                                            <div class="form-group">
                                                @Html.Label("Inventory", htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-1 col-lg-4">
                                                    <select class="form-control select2" id="select-warehouse">
                                                        <option value="">ALL</option>
                                                        @foreach (var warehouse in WarehouseList)
                                                        {
                                                            <option value="@warehouse.ID">@warehouse.Name</option>
                                                        }
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="form-group" id="data-purchase">
                                            </div>
                                        </fieldset>
                                    </div>

                                    <div class="tab-pane" id="hb8">
                                        <fieldset>
                                            <div class="jarviswidget jarviswidget-color-blueLight" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-collapsed="false" data-widget-sortable="false">
                                                <header class="ui-sortable-handle">
                                                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                                                    <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                                                </header>

                                                <!-- widget div-->
                                                <div class="no-padding">
                                                    <!-- widget content -->
                                                    <div class="widget-body">
                                                        <table class="table table-bordered table-striped text-center">
                                                            <thead>
                                                                <tr>
                                                                    <th width="80" class="text-center">ID</th>
                                                                    <th class="text-center">Warehouse</th>
                                                                    <th width="120" class="text-center">Type</th>
                                                                    <th width="150" class="text-center">Available</th>
                                                                    <th width="150" class="text-center">Awaiting Dispatch</th>
                                                                    <th width="150" class="text-center">Aggregate</th>
                                                                    <th width="150" class="text-center">Unfulfillable - Transit</th>
                                                                    <th width="150" class="text-center">Total Inventory</th>
                                                                    <th width="120" class="text-center">Value</th>
                                                                </tr>
                                                            </thead>

                                                            <tbody>
                                                                @foreach (var warehouse in WarehouseList.OrderBy(w => w.Name))
                                                                {
                                                                    <tr>
                                                                        <td>@warehouse.ID</td>
                                                                        <td>@warehouse.Name</td>
                                                                        <td>@warehouse.Type</td>
                                                                        <td>@(AvailableCount.ContainsKey(warehouse.ID) ? AvailableCount[warehouse.ID] : 0)</td>
                                                                        <td>@(AwaitingConut.ContainsKey(warehouse.ID) ? AwaitingConut[warehouse.ID] : 0)</td>
                                                                        <td>@(AggregateCount.ContainsKey(warehouse.ID) ? AggregateCount[warehouse.ID] : 0)</td>
                                                                        <td>@(TransferCount.ContainsKey(warehouse.ID) ? TransferCount[warehouse.ID] : 0)</td>
                                                                        <td>@(AvailableCount.ContainsKey(warehouse.ID) ? AvailableCount[warehouse.ID] : 0)</td>
                                                                        <td>@(TotalValue.ContainsKey(warehouse.ID) ? TotalValue[warehouse.ID] : 0)</td>
                                                                    </tr>
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                    <!-- end widget content -->
                                                </div>
                                                <!-- end widget div -->
                                            </div>
                                        </fieldset>
                                    </div>

                                    <div class="tab-pane" id="hb9">
                                        <fieldset>
                                            <div class="jarviswidget jarviswidget-color-blueLight" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-collapsed="false" data-widget-sortable="false">
                                                <header class="ui-sortable-handle">
                                                    <span class="widget-icon"> <i class="fa fa-table"></i> </span>
                                                    <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                                                </header>

                                                <!-- widget div-->
                                                <div class="no-padding">
                                                    <!-- widget content -->
                                                    <div class="widget-body">
                                                        <table class="table table-bordered table-striped text-center" id="table-statement">
                                                            <thead>
                                                                <tr>
                                                                    <th width="8%" class="text-center">SKU</th>
                                                                    <th width="12%" class="text-center">Date</th>
                                                                    <th width="12%" class="text-center">Supplier</th>
                                                                    <th width="10%" class="text-center">Channel</th>
                                                                    <th width="8%" class="text-center">IS Type</th>
                                                                    <th width="6%" class="text-center">ID</th>
                                                                    <th width="8%" class="text-center">Warehouse</th>
                                                                    <th width="10%" class="text-center">Serial</th>
                                                                    <th width="6%" class="text-center">QTY</th>
                                                                    <th width="6%" class="text-center">Balance(Aggregate)</th>
                                                                    <th width="6%" class="text-center">Balance(Available)</th>
                                                                    <th width="8%" class="text-center">Value(Available)</th>
                                                                </tr>
                                                            </thead>
                                                            <tfoot style="display: table-header-group;"></tfoot>
                                                            <tbody>
                                                                @{
                                                                    foreach (var serial in SerialList)
                                                                    {
                                                                        <tr>
                                                                            <td>@serial.SKU</td>
                                                                            <td>@serial.Date</td>
                                                                            <td>@serial.Supplier</td>
                                                                            <td></td>
                                                                            <td>@(TypeList.ContainsKey(serial.Type) ? TypeList[serial.Type] : "")</td>
                                                                            <td>@Html.SetExtraLink(serial.Type + " Page", serial.ExtendID)</td>
                                                                            <td>@(WarehouseList.FirstOrDefault(w => w.ID.Equals(serial.WID))?.Name ?? serial.WID.ToString())</td>
                                                                            <td>@serial.Serial</td>
                                                                            <td>@serial.QTY</td>
                                                                            <td>@(AggregateCount[serial.WID] - (AwaitingConut.ContainsKey(serial.WID) ? AwaitingConut[serial.WID] : 0))</td>
                                                                            <td>@AvailableCount[serial.WID]</td>
                                                                            <td>@TotalValue[serial.WID]</td>
                                                                        </tr>
                                                                        AggregateCount[serial.WID] -= serial.QTY;
                                                                        AvailableCount[serial.WID] -= !serial.Awaiting ? serial.QTY : 0;
                                                                        TotalValue[serial.WID] -= !serial.Awaiting ? serial.QTY * serial.Price : 0;
                                                                    }
                                                                }
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                    <!-- end widget content -->
                                                </div>
                                                <!-- end widget div -->
                                            </div>
                                        </fieldset>
                                    </div>
                                </div>

                                <div class="widget-footer">
                                    <button type="submit" class="btn btn-primary" id="btn-save">儲存</button>
                                    <button type="button" class="btn btn-primary" id="btn-sync">儲存 & 更新</button>
                                    <button type="button" class="btn btn-default" onclick="location.href='@Url.Action("Index", "Sku")'">返回</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
<div class="hidden">
    <div id="dialog-parent" class="easyui-dialog" title="請選擇品號" data-options="iconCls:'icon-edit',closed:true,resizable:false,shadow:false" style="width:1400px;top:200px;">
        <div class="form-horizontal" data-options="region:'north',border:false">
            <div class="col-sm-12" style="padding:5px;">
                <div class="col-sm-4 no-padding">
                    <input type="text" class="form-control" id="search-filter" placeholder="Search" />
                </div>
            </div>
        </div>
        <div data-options="region:'center'">
            <table id="table-sku" class="easyui-datagrid" style="width:100%;" data-options="onBeforeSelect:function(){return false;}">
                <thead>
                    <tr>
                        <th data-options="field:'ck', checkbox:true, width:'5%', align:'center'"></th>
                        <th data-options="field:'SkuID', width:'20%', align:'center'">SKU</th>
                        <th data-options="field:'Name', width:'75%', align:'center'">品名</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
        <div data-options="region:'south',border:false" style="text-align:right;padding:5px;">
            <button type="button" class="btn btn-default btn-sm" id="btn-addParent">確定</button>
            <button type="button" class="btn btn-default btn-sm" onclick="$parentDialog.dialog('close');">取消</button>
        </div>
    </div>
</div>
<div class="hidden" id="temple-pic">
    <div class="dz-preview dz-file-preview">
        <div style="width:100px; padding-bottom:3px;"><input type="text" class="form-control" /></div>
        <div class="dz-details">
            <div class="dz-filename"><span data-dz-name></span></div>
            <div class="dz-size" data-dz-size></div>
            <img data-dz-thumbnail />
        </div>
        <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>
        <div class="dz-success-mark"><span>✔</span></div>
        <div class="dz-error-mark"><span>✘</span></div>
        <div class="dz-error-message"><span data-dz-errormessage></span></div>
    </div>
</div>
@section pagespecific {
    <script src="~/scripts/jquery.easyui-1.4.3.min.js"></script>
    <script src="~/scripts/plugin/dropzone/dropzone.min.js"></script>
    <script src="~/scripts/plugin/ckeditor/ckeditor.js"></script>
    <script src="~/Scripts/plugin/ckeditor/lang/zh.js"></script>
    <script src="~/Scripts/plugin/ckeditor/config.js"></script>
    <script src="~/Scripts/plugin/ckeditor/styles.js"></script>
    <script type="text/javascript">
        var hash = window.location.hash;
        $('ul.nav-tabs li').eq(hash.substr(1)).addClass('active');
        $('.tab-pane').eq(hash.substr(1)).addClass('active');

        var $parentBtn = $('#btn-parent'), $parentDialog = $('#dialog-parent'), $filterSearch = $('#search-filter'), $skuTable = $('#table-sku');
        var $variationList = $('#list-variation'), $kitList = $('#list-kit'), $contentList = $('#list-content'), $featureList = $('#list-feature'), $attributeList = $("#list-attribute"), $attributeTypeList = $('#list-attributeType');

        $(document).ready(function () {
            CKEDITOR.replace('Description', { height: '500px', allowedContent: true });
            CKEDITOR.replace('PackageContent', { height: '500px', allowedContent: true });
            CKEDITOR.replace('FeatureContent', { height: '500px', allowedContent: true });
            CKEDITOR.replace('SpecContent', { height: '1000px', allowedContent: true });

            $('#LangID').change(function () {
                website.AjaxUrl('@Url.Action("GetLangData", "Sku", new { ID = Model.SkuID })', 'get', { LangID: $(this).val() }).done(function (response) {
                    if (response.status) {
                        $('#Name').val(response.data.Name);
                        $('#Models').val(response.data.Models);
                        CKEDITOR.instances['Description'].setData(website.IsEmpty(response.data.Description) ? '' : response.data.Description);
                        CKEDITOR.instances['PackageContent'].setData(website.IsEmpty(response.data.PackageContent) ? '' : response.data.PackageContent);
                        CKEDITOR.instances['FeatureContent'].setData(website.IsEmpty(response.data.FeatureContent) ? '' : response.data.FeatureContent);
                        CKEDITOR.instances['SpecContent'].setData(website.IsEmpty(response.data.SpecContent) ? '' : response.data.SpecContent);

                        if (!website.IsEmpty(response.data.VariationList)) {
                            $variationList.html(response.data.VariationList);
                        }

                        if (!website.IsEmpty(response.data.KitList)) {
                            $kitList.html(response.data.KitList);
                        }

                        $contentList.html(response.data.ContentList);
                        $featureList.html(response.data.FeatureList);
                        $attributeList.html(response.data.AttributeList);
                    } else {
                        alert(response.message);
                    }
                });
            }).trigger('change');

            $parentBtn.click(function () {
                $skuTable.datagrid('reload');
                $parentDialog.dialog('open');
            })

            $skuTable.datagrid({
                idField: 'ID',
                url: '@Url.Action("GetParent")',
                singleSelect: true,
                onBeforeLoad: function (param) {
                    param.filter = $filterSearch.val();
                    param.Type = 1;
                    param.Condition = $('#Condition').val();
                    param.Category = $('#Category').val();
                    param.Brand = $('#Brand').val();
                },
                onLoadSuccess: function (data) {
                    $skuTable.datagrid('uncheckAll');
                }
            });

            $filterSearch.change(function () { $skuTable.datagrid('reload'); });

            $('#btn-addParent').click(function () {
                var rows = $skuTable.datagrid('getChecked');

                if (rows.length != 1) return alert('請選擇一個品號!');

                $('#ParentSku').val(rows[0].SkuID);

                $parentDialog.dialog('close');
            });

            $('#list-variation, #list-attribute').on('change', 'td#Dimension input, td#Resolution input', function () {
                if (parseFloat($(this).val())) {
                    var $attr = $(this).parents('td:first');

                    var value = [];

                    $attr.find(":text:not([disabled='disabled'])").each(function (i, element) {
                        value.push($(element).val());
                    });
                    $attr.find(':hidden').val(value.join('x'));

                    if ($attr.attr('id') == 'Dimension') {
                        $(this).siblings(':text').val(parseFloat($(this).val()) * 0.03937);
                    }
                } else {
                    $(this).val('');
                    $(this).siblings(':text').val(0);
                }
            })

            Dropzone.autoDiscover = false;
            $("#mydropzone").addClass('dropzone').dropzone({
                url: '@Url.Action("UploadPicture", "Sku", new { ID = Model.SkuID })',
                uploadMultiple: true,
                paramName: 'files',
                acceptedFiles: 'image/*',
                addRemoveLinks: true,
                previewTemplate: document.querySelector('#temple-pic').innerHTML,
                init: function () {
                    var dropZone = this;
                    website.AjaxUrl('@Url.Action("SkuPicture", "Sku", new { sku = Model.SkuID })', 'get').done(function (response) {
                        if (response.status) {
                            if (response.data.length > 0) {
                                $.each(response.data, function (i, file) {
                                    dropZone.emit("addedfile", file);
                                    dropZone.emit("thumbnail", file, "/Uploads/Sku/@Model.SkuID/" + file.name);
                                });
                            }
                        } else {
                            alert(response.message);
                        }
                    });

                    this.on("successmultiple", function (files, response) {
                        $.each(files, function (i, file) {
                            file.ID = response.data[i].ID;
                            file.previewTemplate.querySelector('input').value = response.data[i].Order;
                        });
                    });

                    this.on("addedfile", function (file) {
                        file.previewTemplate.querySelector('input').value = file.Order;
                        file.previewTemplate.querySelector('input').onchange = function () {
                            website.AjaxUrl('@Url.Action("UpdatePicture", "Sku")', 'post', { ID: file.ID, Order: $(this).val() }).done(function (response) {
                                if (!response.status) {
                                    alert(response.message);
                                }
                            });
                        };
                    });

                    this.on("removedfile", function (file) {
                        website.AjaxUrl('@Url.Action("RemovePicture", "Sku")', 'post', { ID: file.ID }).done(function (response) {
                            if (!response.status) {
                                alert(response.message);
                            }
                        });
                    });
                }
            });

            $('#hb6').find('div.input-group input.single-line').change(function () {
                var value, id;
                if (!website.IsEmpty($(this).val()) && $.isNumeric($(this).val())) {
                    value = parseFloat($(this).val());
                    id = $(this).attr('id');
                    if (id == 'CaseWeight' || id == 'ShippingWeight') {
                        $('#' + id + '-lbs').val(value * 22 / 10000);
                    } else {
                        $('#' + id + '-inch').val(value * 3937 / 100000);
                    }
                } else {
                    $(this).val(0);
                }
            }).trigger('change');

            $('#Logistic_BoxID').change(function () {
                website.AjaxUrl('@Url.Action("GetBoxData", "Sku")', 'get', { ID: $(this).val() }).done(function (response) {
                    if (response.status) {
                        $('#boxData').html(response.data);
                    } else {
                        alert(response.message);
                    }
                });
            }).trigger('change');;

            var $warehouseSelect = $('#select-warehouse').change(function () {
                var days = !website.IsEmpty($('#days').val()) ? $('#days').val() : "";
                website.AjaxUrl('@Url.Action("GetPurchaseSerial", "Sku")', 'get', { ID: '@Model.SkuID', WarehouseID: $(this).val(), Days: days }).done(function (response) {
                    if (response.status) {
                        $('#data-purchase').html(response.data);
                        $('#days').change(function () {
                            $warehouseSelect.trigger('change');
                        });

                        TableInit('table-purchase');
                    } else {
                        alert(response.message);
                    }
                });
            }).trigger('change');

            TableInit('table-statement');

            $('#btn-sync').click(function () {
                if (confirm('將會上傳更新至Neto & SC，確定要繼續?')) {
                    $('#Sync').val(true);
                    $('#btn-save').trigger('click');
                }
            });
        });

        function AttrAdd() {
            var source = $attributeTypeList.children('tr').map(function () {
                if (website.IsEmpty($(this).find('span').text()) && !website.IsEmpty($(this).find(':text').val())) {
                    return { text: $(this).find(':text').val(), value: $(this).find(':hidden').val() };
                }
                return { text: $(this).find('span').text(), value: $(this).find(':hidden').val() };
            });

            var index = $variationList.children('tr').length;
            var amount = source.length;
            source.each(function (i) {
                var name = 'VariationValue[' + (parseInt(index) + parseInt(i)) + ']';
                var $newAttr = $("<tr rel='newSku-" + index + "'>").append($("<input type='hidden' name='" + name + "[LangID]' value='@LangID'>"));
                $newAttr.append($("<input type='hidden' name='" + name + "[Sku]' value='newSku-" + index + "'>"));
                if (i == 0) {
                    $newAttr.append($('<td rowspan="' + amount + '" colspan="2">').append($("<input type='text' class='form-control' style='width:80%;height:30px;'>")));

                    $newAttr.find(':text:eq(0)').combobox({
                        valueField: 'value',
                        textField: 'label',
                        loader: function (param, success, error) {
                            if (param.q <= 3) return false;

                            website.AjaxUrl('@Url.Action("FilterSku", "Sku")', 'get', { filter: param.q || '', parentSku: '@Model.SkuID' }).done(function (data) {
                                data = data.map(function (r) {
                                    r.label = r.value + ' - ' + r.name;
                                    return r;
                                });
                                success(data);
                            });
                        },
                        filter: function (q, row) {
                            return (row.label.toLowerCase().indexOf(q.toLowerCase()) >= 0);
                        },
                        onSelect: function (row) {
                            $("tr[rel='newSku-" + index + "']").each(function () {
                                $(this).find(':hidden:eq(0)').val(row.value);
                            });
                        }
                    });
                }
                $newAttr.append($('<td>').append(this.text).append($("<input type='hidden' name='" + name + "[AttrID]' value='" + this.value + "'>")));
                $newAttr.append($('<td class="no-padding">').append($("<input type='text' class='form-control' name='" + name + "[Value]'>")));
                if (i == 0) $newAttr.append('<td rowspan="' + amount + '"><button type="button" class="btn btn-default btn-sm" onclick="$variationList.find(\'tr[rel=newSku-' + index + ']\').remove();">–</button></td>');

                $variationList.append($newAttr);
            });
        };

        function TypeAdd() {
            $newType = $("<tr>").append($("<td colspan='2'>").append($("<input type='text' class='form-control' name='DiverseAttribute[]'>")));
            $attributeTypeList.append($newType);

            $newType.find(':text').combobox({
                valueField: 'attrID',
                textField: 'value',
                loader: function (param, success, error) {
                    if (param.q <= 3) return false;

                    website.AjaxUrl('@Url.Action("FilterAttribute", "SkuAttribute")', 'get', { filter: param.q || '', parentSku: '@Model.SkuID' }).done(function (data) {
                        success(data);
                    });
                },
                filter: function (q, row) {
                    return (row.value.toLowerCase().indexOf(q.toLowerCase()) >= 0);
                }
            });
        }

        function KitAdd() {
            var index = $kitList.children('tr').length;
            var name = 'KitSku[' + parseInt(index) + ']';
            var $newKit = $("<tr rel=''>").append($("<input type='hidden' name='" + name + "[ParentKit]' value='@Model.SkuID'>"));
            $newKit.append($("<td colspan='2'>").append($("<input type='text' class='form-control' name='" + name + "[Sku]' style='width:80%;height:30px;'>")));
            $newKit.append($('<td>').append($("<input type='text' class='form-control' name='" + name + "[Qty]'>")));
            $newKit.append($('<td>').append($("<button type='button' class='btn btn-default btn-sm' onclick='KitDel($(this))'>–</button>")));

            $newKit.find(':text:eq(0)').combobox({
                valueField: 'value',
                textField: 'label',
                loader: function (param, success, error) {
                    if (param.q <= 3) return false;

                    website.AjaxUrl('@Url.Action("FilterSku", "Sku")', 'get', { filter: param.q || '' }).done(function (data) {
                        data = data.map(function (r) {
                            r.label = r.value + ' - ' + r.name;
                            return r;
                        });
                        success(data);
                    });
                },
                filter: function (q, row) {
                    return (row.label.toLowerCase().indexOf(q.toLowerCase()) >= 0);
                }
            });

            $kitList.append($newKit);
        }

        function AttrDel($btn) {
            var sku = $btn.parents('tr').attr('rel');
            website.AjaxUrl('@Url.Action("RemoveVariation", "Sku")', 'post', { ID: sku }).done(function (response) {
                if (response.status) {
                    $variationList.find("tr[rel='" + sku + "']").remove();
                } else {
                    alert(response.message);
                }
            });
        }

        function KitDel($btn) {
            $kit = $btn.parents('tr:eq(0)');

            if (!website.IsEmpty($kit.attr('rel'))) {
                website.AjaxUrl('@Url.Action("RemoveKit", "Sku")', 'post', { ID: $kit.attr('rel'), ParentKit: '@Model.SkuID' });
            }

            $kit.remove();

            $kitList.find('tr').each(function(i) {
                var name = 'KitSku[' + i + ']';
                if (!website.IsEmpty($kit.attr('rel'))) {
                    $(this).find(':hidden:eq(0)').attr('name', name + '[sku]');
                    $(this).find(':hidden:eq(1)').attr('name', name + '[ParentKit]');
                    $(this).find(':text').attr('name', name + '[Qty]');
                } else {
                    $(this).find(':hidden:eq(0)').attr('name', name + '[ParentKit]');
                    $(this).find(':text:eq(0)').attr('textboxname', name + '[Sku]');
                    $(this).find('input.textbox-value').attr('name', name + '[Sku]');
                    $(this).find(':text:eq(2)').attr('name', name + '[Qty]');
                }
            });
        }

        function ResetPackageContent() {
            var data = $contentList.find('input').serializeArray();
            data.push({ 'name': 'LangID', 'value': $('#LangID').val() });
            website.AjaxUrl('@Url.Action("GetPackageContent", "Sku", new { ID = Model.SkuID })', 'post', data).done(function (response) {
                if (response.status) {
                    CKEDITOR.instances['PackageContent'].setData(response.data);
                }
            });
        }

        function ResetFeatureContent() {
            var data = $featureList.find('input').serializeArray();
            data.push({ 'name': 'LangID', 'value': $('#LangID').val() });
            website.AjaxUrl('@Url.Action("GetFeatureContent", "Sku", new { ID = Model.SkuID })', 'post', data).done(function (response) {
                if (response.status) {
                    CKEDITOR.instances['FeatureContent'].setData(response.data);
                }
            });
        }

        function ResetSpecContent() {
            var data = $attributeList.find('input').serializeArray();
            data.push({ 'name': 'LangID', 'value': $('#LangID').val() });
            website.AjaxUrl('@Url.Action("GetSpecContent", "Sku", new { ID = Model.SkuID })', 'post', data).done(function (response) {
                if (response.status) {
                    CKEDITOR.instances['SpecContent'].setData(response.data);
                }
            });
        }

        var TableInit = function (id) {
            $('#' + id + ' thead tr').clone().appendTo($('#' + id + ' tfoot'));
            var $Table = $('#' + id).DataTable({
                "columnDefs": [{ "orderable": false, "targets": 0 }],
                "order": []
            });
            $Table.columns().every(function () {
                var that = this;
                $(that.footer()).html('<input type="text" placeholder="Search" />');
                $('input', this.footer()).on('keyup change', function () {
                    if (that.search() !== this.value) {
                        that.search(this.value).draw();
                    }
                });
            });
        };
    </script>
}