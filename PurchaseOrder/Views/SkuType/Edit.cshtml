@model SkuType
@{
    var LangID = (string)ViewBag.LangID;
    var AttributeTypeList = (List<SkuAttributeType>)ViewBag.AttributeTypeList;
}

<div id="content">
    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-xs-12">
                <div class="jarviswidget" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-sortable="false">

                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>

                        <h2>編輯</h2>
                        <ul class="nav nav-tabs pull-right">
                            <li><a data-toggle="tab" href="#hb1">基本資料</a></li>
                            <li><a data-toggle="tab" href="#hb2">屬性組合</a></li>
                        </ul>
                    </header>

                    <div>
                        <div class="widget-body no-padding">
                            <form id="data-form" class="form-horizontal" method="post" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()

                                <div id="content" class="tab-content">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    <div class="tab-pane" id="hb1">
                                        <fieldset>
                                            <legend>基本資料</legend>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SkuTypeLang.First().LangID, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownList("LangID", (IEnumerable<SelectListItem>)ViewBag.LangList, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.NetoID, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-3">
                                                    @Html.EditorFor(model => model.NetoID, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.NetoID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.SkuTypeLang.First().Name, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-3">
                                                    @Html.EditorFor(model => model.SkuTypeLang.First().Name, new { htmlAttributes = new { @class = "form-control" } })
                                                    @Html.ValidationMessageFor(model => model.SkuTypeLang.First().Name, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                        </fieldset>
                                    </div>

                                    <div class="tab-pane" id="hb2">
                                        <fieldset>
                                            <legend>屬性組合</legend>
                                            @{ Dictionary<int, int[]> group = JsonConvert.DeserializeObject<Dictionary<int, int[]>>(Model.AttributeGroup); }
                                            @foreach (var type in AttributeTypeList)
                                            {
                                                <div class="form-group">
                                                    @Html.Label("", type.Name, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9">
                                                        @{
                                                            var attributeLangList = type.SkuAttribute.Where(a => a.IsEnable).SelectMany(a => a.SkuAttributeLang).Where(l => l.LangID.Equals(LangID));
                                                            var selectItem = attributeLangList.Select(l => new SelectListItem() { Text = l.Name, Value = l.AttrID.ToString(), Selected = group.ContainsKey(type.ID) && group[type.ID].Contains(l.AttrID) });
                                                            var name = string.Format("AttributeGroup[{0}][]", type.ID);
                                                            var order = group.ContainsKey(type.ID) ? string.Join(",", group[type.ID]) : "";
                                                        }
                                                        @Html.DropDownList(name, selectItem, htmlAttributes: new { @class = "form-control select-attr", @multiple = "multiple", @style = "width: 100%", @id = "select-attribute", @data_order = order })
                                                    </div>
                                                </div>
                                            }
                                        </fieldset>
                                    </div>
                                </div>

                                <div class="widget-footer">
                                    <button type="submit" class="btn btn-primary" id="save">儲存</button>
                                    <button type="button" class="btn btn-default" onclick="location.href='@Url.Action("Index", "SkuType")'">返回</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
@section pagespecific {
    <script type="text/javascript">
        var hash = window.location.hash;
        $('ul.nav-tabs li').eq(hash.substr(1)).addClass('active');
        $('.tab-pane').eq(hash.substr(1)).addClass('active');

        $(document).ready(function () {
            $('.select-attr').select2Sortable();

            $('#LangID').change(function () {
                website.AjaxUrl('@Url.Action("GetLangData", "SkuType", new { ID = Model.ID })', 'get', { LangID: $(this).val() }).done(function (response) {
                    if (response.status) {
                        $('#Name').val(response.data.Name);
                    } else {
                        alert(response.message);
                    }
                });
            });
        });


        function getSortableUl($select) {
            return $select.siblings('.select2-container').find('ul.select2-selection__rendered');
        };

        function initSortableUl($ul, options) {
            $ul.sortable({
                //forcePlaceholderSize: true,
                items: 'li.select2-selection__choice',
                placeholder: 'select2-selection__choice'
            }).disableSelection();

            // Only bind event at initialization
            if (options && options.bindSortEvent && options.$select) {
                $ul.bind('sortupdate', function (e, ui) {
                    $($ul.find('li.select2-selection__choice').get().reverse()).each(function () {
                        var id = $(this).data('data').id,
                            $option = options.$select.find('option[value="' + id + '"]')[0];

                        options.$select.prepend($option);
                    });
                });
            }
        };

        function initSelect2Sortable($select) {
            var observer, $ul;

            $select.select2();
            $ul = getSortableUl($select);

            observer = new MutationObserver(function (mutations) {
                console.log(mutations);
                initSortableUl($ul);
                observer.disconnect();
            });

            $select.on('select2-selecting', function () {
                observer.observe($ul.get(0), { subtree: false, childList: true, attributes: false });
            });

            initSortableUl($ul, { bindSortEvent: true, $select: $select });

            $select.data('hasSelect2Sortable', true);
        };

        function sortSelect2Sortable($select, val) {
            var $ul = getSortableUl($select), $lis = $ul.find('.select2-selection__choice');

            $.each(val, function (i, id) {
                $lis.each(function () {
                    if (id == $(this).data('data').id) {
                        $(this).insertBefore($ul.find('.select2-search'));
                    }
                });
            });

            $ul.trigger('sortupdate');
        }

        $.fn.extend({

            select2Sortable: function (val) {
                this.each(function () {
                    var $select = $(this);

                    if (!$select.prop('multiple')) {
                        return;
                    }

                    if (!$select.data('hasSelect2Sortable')) {
                        initSelect2Sortable($select);

                        var values = $select.attr('data-order');

                        if (values) {
                            sortSelect2Sortable($select, values.split(','));
                        }
                    }

                    if (val) {
                        sortSelect2Sortable($select, val);
                    }
                });

                return this;
            }
        });
    </script>
}   