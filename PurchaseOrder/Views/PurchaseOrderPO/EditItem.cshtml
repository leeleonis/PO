@model PurchaseOrder
@{
    ViewBag.title = "修改採購單";
    var dtval = DateTime.UtcNow.ToString("yyyy/MM/dd");
    var POTypeDDL = EnumData.POTypeDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var POStatusDDL = EnumData.POStatusDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var VendorDDL = EnumData.VendorDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var CompanyDDL = EnumData.CompanyDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var ReceiveStatusDDL = EnumData.ReceiveStatusDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var PaymentStatusDDL = EnumData.PaymentStatusDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var Warehouselist = EnumData.WarehouseDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var CurrencyDDL = EnumData.CurrencyDDL().Select(x => new SelectListItem { Text = x.Value, Value = x.Key }).ToList();
    var DefaultSelect = PurchaseOrderSys.App_GlobalResources.Resource.DefaultSelect;

    if (Model != null)
    {
        if (Model.PODate.HasValue)
        {
            dtval = Model.PODate.Value.ToString("yyyy/MM/dd");
        }
    }
}
<style>
    .img {
        max-width: 20px;
        max-height: 20px;
        margin: 5px;
    }
</style>
<div id="content">
    <section id="widget-grid" class="">
        <div class="row">
            <article class="col-xs-12">
                <div class="jarviswidget" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-togglebutton="false" data-widget-deletebutton="false" data-widget-fullscreenbutton="false" data-widget-custombutton="false" data-widget-sortable="false">
                    <header>
                        <span class="widget-icon"> <i class="fa fa-edit"></i> </span>

                        <h2>@ViewBag.title</h2>
                        <ul class="nav nav-tabs pull-right">
                            <li><a data-toggle="tab" href="#hb1">@ViewBag.title</a></li>
                        </ul>
                    </header>
                    <div>
                        <div class="widget-body no-padding">
                            <form id="data-form" class="form-horizontal" method="post" enctype="multipart/form-data">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="IsEnable" value="True">
                                @Html.HiddenFor(x => x.ID)
                                <div id="content" class="tab-content">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                    @if (Model.POType == "PurchaseOrder")
                                    {
                                    <div class="tab-pane" id="hb1">
                                        <h1><b>PO# @Model.ID</b></h1>
                                        <fieldset>
                                            <legend>@ViewBag.title</legend>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.CompanyID, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListFor(model => model.CompanyID, CompanyDDL, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                                @Html.LabelFor(model => model.VendorID, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListFor(model => model.VendorID, VendorDDL, htmlAttributes: new { @class = "form-control" })
                                                </div>
                                                @Html.LabelFor(model => model.CreditMemo.FirstOrDefault().ID, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @foreach (var item in Model.CreditMemo.Where(x => x.IsEnable))
                                                    {
                                                        <a target='_blank' href='@Url.Action("EditItem", "PurchaseOrderCM", new { id = item.ID })'>@item.ID</a> @:|
                                                    }
                                                </div>
                                            </div>
                                                <div class="form-group">
                                                    @Html.Label("Company No", htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.Editor("CompanyNo", new { htmlAttributes = new { @class = "form-control" } })
                                                    </div>
                                                    @Html.Label("Vendor No", htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.Editor("VendorNo", new { htmlAttributes = new { @class = "form-control" } })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.POStatus, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.POStatus, POStatusDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.POStatus, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.InvoiceDate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.InvoiceDate)
                                                        @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.POType, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.POType, POTypeDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.POType, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.InvoiceNo, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control" } } })
                                                        @Html.ValidationMessageFor(model => model.InvoiceNo, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.PODate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.PODate, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control datepicker " }, { "Value", dtval }, { "data-dateformat", "yy/mm/dd" } } })
                                                        @Html.ValidationMessageFor(model => model.PODate, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.Label("Vendor Invoice", htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @*@Html.Editor("VendorInvoice", new { htmlAttributes = new { @class = "form-control" } })*@
                                                        <input type='file' class="ImgFile" name="VendorInvoice" id="VendorInvoice" multiple>
                                                    </div>
                                                    <div class="col-sm-9 col-lg-2">
                                                        <div class="opreview">
                                                            @foreach (var item in Model.ImgFile.Where(x => x.IsEnable && x.ImgType == "VendorInvoice"))
                                                            {
                                                                <a class="aimg" href="@item.Url" data-lightbox="roadtrip"><img class="img" src="@item.Url" /></a>
                                                            }
                                                        </div>
                                                        <div class="preview" id="VendorInvoicepreview">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ReceiveStatus, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.ReceiveStatus, ReceiveStatusDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ReceiveStatus, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.PaymentStatus, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.PaymentStatus, PaymentStatusDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.PaymentStatus, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ReceivedDate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.ReceivedDate)
                                                        @Html.ValidationMessageFor(model => model.ReceivedDate, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.PaymentDate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.PaymentDate)
                                                        @Html.ValidationMessageFor(model => model.PaymentDate, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ShippedDate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.ShippedDate)
                                                        @Html.ValidationMessageFor(model => model.ShippedDate, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.PaidAmount, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control changed" } } })
                                                        @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Carrier, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.Carrier, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control" } } })
                                                        @Html.ValidationMessageFor(model => model.Carrier, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.PaymentProof, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @*@Html.Editor("VendorInvoice", new { htmlAttributes = new { @class = "form-control" } })*@
                                                        <input type='file' class="ImgFile" name="PaymentProofList" id="PaymentProofList" multiple>
                                                    </div>
                                                    <div class="col-sm-9 col-lg-2">
                                                        <div class="opreview">
                                                            @foreach (var item in Model.ImgFile.Where(x => x.IsEnable && x.ImgType == "PaymentProof"))
                                                            {
                                                                <a class="aimg" href="@item.Url" data-lightbox="roadtrip"><img class="img" src="@item.Url" /></a>
                                                            }
                                                        </div>
                                                        <div class="preview" id="PaymentProofListpreview">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Tracking, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.Tracking, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control" } } })
                                                        @Html.ValidationMessageFor(model => model.Tracking, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                        </fieldset>
                                        <fieldset>
                                            <legend>Items Ordered</legend>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Warehouse, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListFor(model => model.WarehouseID, Warehouselist, htmlAttributes: new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.WarehouseID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    @Html.DropDownListFor(model => model.Currency, CurrencyDDL, DefaultSelect, htmlAttributes: new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(model => model.Currency, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                <div class="col-sm-9 col-lg-2">
                                                    <div class="col-sm-2 col-lg-1">
                                                        <div class="checkbox">
                                                            @Html.CheckBox("TaxShow", true)
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-10 col-lg-10">
                                                        @Html.EditorFor(model => model.Tax, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control changed" } } })
                                                        @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                                                    </div>


                                                </div>
                                            </div>
                                        </fieldset>
                                        <fieldset>
                                            <legend></legend>
                                            <div class="form-group">
                                                <div class="col-sm-9 col-lg-2">
                                                    <button type="button" id="Edititems">Edit items</button>
                                                    <button type="button" id="Removeitems">Remove items</button>
                                                </div>
                                                <div class="col-lg-offset-10">
                                                    <a class='btn btn-danger btn-sm' id='CreateCM'>Create CM</a>
                                                    <a type="button" href="@Url.Action("ReceiveItems",new {Model.ID})" class='btn btn-danger btn-sm'>Receive Items</a>
                                                    <a class='btn btn-danger btn-sm Excel' valID=" @Model.ID">Create by Excel</a>
                                                </div>
                                            </div>
                                            <div class="row">
                                                <article class="col-xs-12">
                                                    <table id="DataGridC" class="table table-striped table-bordered">
                                                        <thead>
                                                            <tr>
                                                                <th><input type="checkbox" /></th>
                                                                <th></th>
                                                                <th>SKU</th>
                                                                <th>Vendor SKU</th>
                                                                <th>Name</th>
                                                                <th>QTY Ordered</th>
                                                                <th>QTY Received</th>
                                                                <th>Price</th>
                                                                <th>Discount</th>
                                                                <th>Credit</th>
                                                                <th>Discounted Price</th>
                                                                <th>Subtotal (currency)</th>
                                                            </tr>
                                                        </thead>
                                                        <tbody></tbody>
                                                        <tfoot>
                                                            <tr>
                                                                <td colspan="10">
                                                                    <select id="gebruikerId" name="gebruikerId" class=" form-control" style="width:50%"></select>
                                                                    <button type="button" id="addsku">Add SKU</button>
                                                                </td>
                                                                <td></td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="10" rowspan="10">
                                                                    <div class="col-sm-10 col-lg-8">
                                                                        <textarea rows="20" style="width:100%" id="textnote"></textarea>
                                                                        <button type="button" id="addnote" style="float:right" class="btn btn-default btn-sm">Add Note</button>
                                                                        <span style="float:right">　</span>
                                                                        <button type="button" id="UploadImage" style="float:right" class="btn btn-default btn-sm">Upload Image</button>
                                                                        <input type="file" id="addimg" style="float:right" />
                                                                    </div>
                                                                    <div class="col-sm-2 col-lg-4">
                                                                        <ul style="list-style-type:none;list-style-position: inside;padding-left: 0px;padding-left: 0px;" id="textnotelog">
                                                                            @foreach (var item in Model.PurchaseNote.OrderByDescending(x => x.ID))
                                                                            {
                                                                                <li>
                                                                                    <fieldset>
                                                                                        <legend>
                                                                                            @if (item.NoteType == "Url")
                                                                                            {
                                                                                                <a class="aimg" href="@item.Note" data-lightbox="roadtrip"><img class="img" src="@item.Note" /></a>
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                @item.Note
                                                                                            }

                                                                                            <br />
                                                                                            @( item.CreateAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss") + "；" + item.CreateBy)
                                                                                        </legend>
                                                                                    </fieldset>
                                                                                </li>
                                                                            }
                                                                        </ul>
                                                                    </div>
                                                                </td>
                                                                <td>Total:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Total Discount:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Tax:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Shipping Cost:</td>
                                                                <td>@Html.EditorFor(model => model.ShippingCost, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control changed" } } })</td>
                                                            </tr>
                                                            <tr>
                                                                <td>Other:</td>
                                                                <td>@Html.EditorFor(model => model.Other, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control changed" } } })</td>
                                                            </tr>
                                                            <tr>
                                                                <td>Grand Total:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Total Paid:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Total Refunded:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>CM Credit:</td>
                                                                <td></td>
                                                            </tr>
                                                            <tr>
                                                                <td>Balance:</td>
                                                                <td></td>
                                                            </tr>
                                                        </tfoot>
                                                    </table>
                                                </article>
                                            </div>
                                        </fieldset>
                                    </div>

                                    }
                                    else if (Model.POType == "DropshpOrder")
                                    {
                                        <div class="tab-pane" id="hb1">
                                            <fieldset>
                                                <legend>@ViewBag.title</legend>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.CompanyID, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.CompanyID, CompanyDDL, htmlAttributes: new { @class = "form-control" })
                                                    </div>
                                                    @Html.LabelFor(model => model.VendorID, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.VendorID, VendorDDL, DefaultSelect, htmlAttributes: new { @class = "form-control" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.Label("Company No", htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.Editor("CompanyNo", new { htmlAttributes = new { @class = "form-control" } })
                                                    </div>
                                                    @Html.Label("Vendor No", htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.Editor("VendorNo", new { htmlAttributes = new { @class = "form-control" } })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.POStatus, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.POStatus, POStatusDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.POStatus, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.InvoiceDate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.InvoiceDate)
                                                        @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.POType, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.POType, POTypeDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.POType, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.InvoiceNo, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.InvoiceNo, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control datepicker " } } })
                                                        @Html.ValidationMessageFor(model => model.InvoiceNo, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.PODate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.PODate, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control datepicker " }, { "Value", dtval }, { "data-dateformat", "yy/mm/dd" } } })
                                                        @Html.ValidationMessageFor(model => model.PODate, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.Label("Vendor Invoice", htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @*@Html.Editor("VendorInvoice", new { htmlAttributes = new { @class = "form-control" } })*@
                                                        <input type='file' class="ImgFile" name="VendorInvoice" id="VendorInvoice" multiple>
                                                    </div>
                                                    <div class="col-sm-9 col-lg-2">
                                                        <div class="opreview">
                                                            @foreach (var item in Model.ImgFile.Where(x => x.IsEnable && x.ImgType == "VendorInvoice"))
                                                            {
                                                                <a class="aimg" href="@item.Url" data-lightbox="roadtrip"><img class="img" src="@item.Url" /></a>
                                                            }
                                                        </div>
                                                        <div class="preview" id="VendorInvoicepreview">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ReceiveStatus, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.ReceiveStatus, ReceiveStatusDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.ReceiveStatus, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.PaymentStatus, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.PaymentStatus, PaymentStatusDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.PaymentStatus, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ReceivedDate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.ReceivedDate)
                                                        @Html.ValidationMessageFor(model => model.ReceivedDate, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.PaymentDate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.PaymentDate)
                                                        @Html.ValidationMessageFor(model => model.PaymentDate, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.ShippedDate, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.ShippedDate)
                                                        @Html.ValidationMessageFor(model => model.ShippedDate, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.PaidAmount, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.PaidAmount, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control" } } })
                                                        @Html.ValidationMessageFor(model => model.PaidAmount, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Carrier, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.Carrier, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control" } } })
                                                        @Html.ValidationMessageFor(model => model.Carrier, "", new { @class = "text-danger" })
                                                    </div>
                                                    @Html.LabelFor(model => model.PaymentProof, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @*@Html.Editor("VendorInvoice", new { htmlAttributes = new { @class = "form-control" } })*@
                                                        <input type='file' class="ImgFile" name="PaymentProofList" id="PaymentProofList" multiple>
                                                    </div>
                                                    <div class="opreview">
                                                        @foreach (var item in Model.ImgFile.Where(x => x.IsEnable && x.ImgType == "PaymentProof"))
                                                        {
                                                            <a class="aimg" href="@item.Url" data-lightbox="roadtrip"><img class="img" src="@item.Url" /></a>
                                                        }
                                                    </div>
                                                    <div class="col-sm-9 col-lg-2">
                                                        <div class="preview" id="PaymentProofListpreview">
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Tracking, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.EditorFor(model => model.Tracking, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control" } } })
                                                        @Html.ValidationMessageFor(model => model.Tracking, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </fieldset>
                                            <fieldset>
                                                <legend>Items Ordered</legend>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Warehouse, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.Warehouse, Warehouselist, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.Warehouse, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Currency, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        @Html.DropDownListFor(model => model.Currency, CurrencyDDL, htmlAttributes: new { @class = "form-control" })
                                                        @Html.ValidationMessageFor(model => model.Currency, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Tax, htmlAttributes: new { @class = "control-label col-sm-2" })
                                                    <div class="col-sm-9 col-lg-2">
                                                        <div class="col-sm-2 col-lg-1">
                                                            <div class="checkbox">
                                                                @Html.CheckBox("TaxShow", true)
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-10 col-lg-10">
                                                            @Html.EditorFor(model => model.Tax, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control changed" } } })
                                                            @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
                                                        </div>
                                                    </div>
                                                </div>
                                            </fieldset>
                                            <fieldset>
                                                <legend></legend>
                                                <div class="form-group">
                                                    @*<div class="col-sm-9 col-lg-2">
                                                            <button type="button" id="Edititems">Edit items</button>
                                                            <button type="button" id="Removeitems">Remove items</button>
                                                        </div>*@
                                                    <div class="col-lg-offset-10">
                                                        <a class='btn btn-danger btn-sm' id='CreateCM'>Create CM</a>
                                                        <a class='btn btn-danger btn-sm Excel' valID=" @Model.ID">Create by Excel</a>
                                                        @*<a type="button" href="@Url.Action("ReceiveItems",new {Model.ID})" class='btn btn-danger btn-sm'>Receive Items</a>*@
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <article class="col-xs-12">
                                                        <table id="DataGridC" class="table table-striped table-bordered">
                                                            <thead>
                                                                <tr>
                                                                    <th><input type="checkbox" /></th>
                                                                    <th></th>
                                                                    <th>SKU</th>
                                                                    <th>Vendor SKU</th>
                                                                    <th>Name</th>
                                                                    <th>QTY Ordered</th>
                                                                    <th>QTY Fulfilled</th>
                                                                    <th>Price</th>
                                                                    <th>Discount</th>
                                                                    <th>Credit</th>
                                                                    <th>Discounted Price</th>
                                                                    <th>Subtotal (currency)</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody></tbody>
                                                            <tfoot>
                                                                <tr>
                                                                    <td colspan="10">
                                                                        <select id="gebruikerId" name="gebruikerId" class=" form-control" style="width:50%"></select>
                                                                        <button type="button" id="addsku">Add SKU</button>
                                                                    </td>
                                                                    <td></td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr>
                                                                    <td colspan="10" rowspan="10">
                                                                        <div class="col-sm-10 col-lg-8">
                                                                            <textarea rows="20" style="width:100%" id="textnote"></textarea>
                                                                            <button type="button" id="addnote" style="float:right" class="btn btn-default btn-sm">Add Note</button>
                                                                            <span style="float:right">　</span>
                                                                            <button type="button" id="UploadImage" style="float:right" class="btn btn-default btn-sm">Upload Image</button>
                                                                            <input type="file" id="addimg" style="float:right" />
                                                                        </div>
                                                                        <div class="col-sm-2 col-lg-4">
                                                                            <ul style="list-style-type:none;list-style-position: inside;padding-left: 0px;padding-left: 0px;" id="textnotelog">
                                                                                @foreach (var item in Model.PurchaseNote.OrderByDescending(x => x.ID))
                                                                                {
                                                                                    <li>
                                                                                        <fieldset>
                                                                                            <legend>
                                                                                                @if (item.NoteType == "Url")
                                                                                                {
                                                                                                    <a class="aimg" href="@item.Note" data-lightbox="roadtrip"><img class="img" src="@item.Note" /></a>
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    @item.Note
                                                                                                }

                                                                                                <br />
                                                                                                @( item.CreateAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm:ss") + "；" + item.CreateBy)
                                                                                            </legend>
                                                                                        </fieldset>
                                                                                    </li>
                                                                                }
                                                                            </ul>
                                                                        </div>
                                                                    </td>
                                                                    <td>Total:</td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr>
                                                                    <td>Total Discount:</td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr>
                                                                    <td>Tax:</td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr>
                                                                    <td>Shipping Cost:</td>
                                                                    <td>@Html.EditorFor(model => model.ShippingCost, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control changed" } } })</td>
                                                                </tr>
                                                                <tr>
                                                                    <td>Other:</td>
                                                                    <td>@Html.EditorFor(model => model.Other, new { htmlAttributes = new Dictionary<string, object> { { "class", "form-control changed" } } })</td>
                                                                </tr>
                                                                <tr>
                                                                    <td>Grand Total:</td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr>
                                                                    <td>Total Paid:</td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr>
                                                                    <td>Total Refunded:</td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr>
                                                                    <td>CM Credit:</td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr>
                                                                    <td>Balance:</td>
                                                                    <td></td>
                                                                </tr>
                                                            </tfoot>
                                                        </table>
                                                    </article>
                                                </div>
                                            </fieldset>
                                        </div>

                                    }
                                </div>

                                <div class="widget-footer">
                                    <button type="button" class="btn btn-info" id="POEmail">Email PO to Vendor</button>
                                    <button type="submit" class="btn btn-primary" id="save">儲存</button>
                                    <button type="button" class="btn btn-primary" id="saveexit">儲存並返回</button>
                                    <button type="button" class="btn btn-default" onclick="location.href='@Url.Action("Index")'">返回</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </article>
        </div>
    </section>
</div>
<div id="dialog">

</div>
@section pagespecific {
<link href="~/Content/css/lightbox.css" rel="stylesheet" />
<script src="~/Scripts/lightbox.js"></script>
<script type="text/javascript">
        var hash = window.location.hash;
        $('ul.nav-tabs li').eq(hash.substr(1)).addClass('active');
        $('.tab-pane').eq(hash.substr(1)).addClass('active');
        var tableID = "#DataGridC";
        var DataGridC;
        $(document).ready(function () {
            DataGridC = $(tableID).DataTable({
                fixedHeader: {
                    header: true,
                    footer: true
                },
                select: {
                    style: 'os',
                    selector: 'td:first-child'
                },
                columns: [
                    {
                        data: "ck",
                        className: 'select-checkbox',
                        orderable: false,
                        render: function (data, type, row, meta) {
                            if (row.ID == null) {
                                return '<input type="checkbox" value="' + row.SKU + '">';
                            }
                            else {
                                return '<input type="checkbox" value="' + row.ID + '">';
                            }
                        }
                    },
                    {
                        "className": 'details-control',
                        "orderable": false,
                        "data": null,
                        "defaultContent": '' },
                   {
                        data: "SKU", render: function (data, type, row, meta) {
                            return "<a  target='_blank' href='" + "@Url.Action("edit", "Sku")" + "?id=" + row.SKU + "#6'>" + row.SKU + "</a>";
                        }
                    },
                    { data: "VendorSKU" },
                    { data: "Name" },
                    {
                        data: "QTYOrdered", render: function (data, type, row) {
                            if (row.Model=="E") {
                                return '<input class="form-control" type="text" onchange="Calculation(this,\'QTYOrdered\',\'' + row.SKU + '\',' + data + ',' + row.ID + ')"  value = ' + data + ' > ';
                            }
                            else {
                                return data;
                            }
                        }
                    },
                    @if (Model.POType == "PurchaseOrder")
                    {
                        @:{ data: "QTYReceived", render: function(data, type, row) { return data; } },
                    }
                    else if (Model.POType == "DropshpOrder")
                    {
                       @:{ data: "QTYFulfilled", render: function(data, type, row) { return data; } },
                    }
                    {
                        data: "Price", render: function (data, type, row) {
                            if (row.Model == "E") {
                                return '<input class="form-control" type="text" onchange="Calculation(this,\'Price\',\'' + row.SKU + '\',' + data + ',' + row.ID + ')"  value = ' + thousandComma(data) + ' > ';
                            }
                            else {
                                return data;
                            }
                        }
                    },
                    {
                        data: "Discount", render: function (data, type, row) {
                            if (row.Model == "E") {
                                return '<input class="form-control" type="text" onchange="Calculation(this,\'Discount\',\'' + row.SKU + '\',' + data + ',' + row.ID + ')"  value = ' + thousandComma(data) + '  > ';
                            }
                            else {
                                return data;
                            }
                        }
                    },
                    {
                        data: "Credit", render: function (data, type, row) {
                            if (row.Model == "E") {
                                return '<input class="form-control" type="text" onchange="Calculation(this,\'Credit\',\'' + row.SKU + '\',' + data + ',' + row.ID + ')"  value = ' + thousandComma(data) + '  > ';
                            }
                            else {
                                return data;
                            }
                        }
                    },
                    {
                        data: "DiscountedPrice", render: function (data, type, row) {
                            return thousandComma(data);
                        }
                    },
                    {
                        data: "Subtotal", render: function (data, type, row) {
                            return thousandComma(data);
                        }
                    }
                ],
                ajax: {
                    traditional: true,
                    method: "get",//或post，自由決定，影響到Server端用FormCollection取值或Request.QueryString取得DataTables傳遞的資訊
                    url: "@Url.Action("SkuNumberList", "Ajax")",
                    data: function (d) {
                        var Skulist = $("#gebruikerId").val();
                        d.Skulist = Skulist;
                        d.SID=@Html.Display("ID");
                        $("#gebruikerId").val(null).trigger('change');
                    }
                },
                serverSide: true,//啟用ServerSide模式
                //deferLoading: 0, //初始化DataTable時，不發出ajax
                orderMulti: false,
                "paging": false,
                "ordering": false,
                "info": true,
                "searching": false,
                "footerCallback": function (row, data, start, end, display) {
                    var api = this.api(), data;

                    // Remove the formatting to get integer data for summation
                    var intVal = function (i) {
                        return typeof i === 'string' ?
                            i.replace(/[\$,]/g, '') * 1 :
                            typeof i === 'number' ?
                                i : 0;
                    };
                    //Total
                    total = api.column(11).data().reduce(function (a, b) { return intVal(a) + intVal(b); }, 0);
                    $('tr:eq(1) td:eq(2)', api.table().footer()).html(thousandComma(total));//Total
                    //TotalDiscount
                    TotalDiscount = 0;
                    TotalDiscount5 = api.column(5).data();
                    TotalDiscount8 = api.column(8).data();
                    for (var i = 0; i < TotalDiscount5.length; i++) {
                        TotalDiscount += intVal(TotalDiscount5[i]) * intVal(TotalDiscount8[i]);
                    }
                    $('tr:eq(2) td:eq(1)', api.table().footer()).html(thousandComma(TotalDiscount));//TotalDiscount
                    //Tax:
                    var TaxVal = intVal($("#Tax").val());
                    Tax = total - (total / (1 + TaxVal / 100));
                    $('tr:eq(3) td:eq(1)', api.table().footer()).html(thousandComma(Tax));//TotalDiscount

                    //Shipping Cost:
                    var ShippingCost = intVal($("#ShippingCost").val());
                    if (ShippingCost < 0) {
                        alert("Shipping Cost 不可為負數")
                        $("#ShippingCost").val("");
                        $("#ShippingCost").focus();
                    }
                    //$('tr:eq(4) td:eq(1)', api.table().footer()).html(thousandComma(ShippingCost));//Shipping Cost
                    //Other:
                    var Other = intVal($("#Other").val());
                    //$('tr:eq(5) td:eq(1)', api.table().footer()).html(thousandComma(Other));
                    //Grand Total:
                    GrandTotal = total - ShippingCost + Other;
                    $('tr:eq(6) td:eq(1)', api.table().footer()).html(thousandComma(GrandTotal));
                    //Total Paid:
                    TotalPaid = intVal($("#PaidAmount").val());;
                    $('tr:eq(7) td:eq(1)', api.table().footer()).html(thousandComma(TotalPaid));
                    //Total Refunded:
                    TotalRefunded = 0;
                    $('tr:eq(8) td:eq(1)', api.table().footer()).html(thousandComma(TotalRefunded));
                    //CM Credit:
                    CMCredit = 0;
                    $('tr:eq(9) td:eq(1)', api.table().footer()).html(thousandComma(CMCredit));
                    //Balance:
                    Balance = TotalPaid - GrandTotal + TotalRefunded + CMCredit;
                    if (TotalPaid > 0) {
                        if (Balance < 0) {
                            $("#PaymentStatus").val("PartiallyPaid");
                        } else if (Balance > 0) {
                            $("#PaymentStatus").val("OverPaid");
                        } else if (Balance == 0) {
                            $("#PaymentStatus").val("Completed");
                        }
                    }
                    $('tr:eq(10) td:eq(1)', api.table().footer()).html(thousandComma(Balance));
                }
            });
            //DataGridC.on("click", "th.select-checkbox", function () {
            //    if ($("th.select-checkbox").hasClass("selected")) {
            //        DataGridC.rows().deselect();
            //        $("th.select-checkbox").removeClass("selected");
            //    } else {
            //        DataGridC.rows().select();
            //        $("th.select-checkbox").addClass("selected");
            //    }
            //}).on("select deselect", function () {
            //    ("Some selection or deselection going on")
            //    if (DataGridC.rows({
            //        selected: true
            //    }).count() !== example.rows().count()) {
            //        $("th.select-checkbox").removeClass("selected");
            //    } else {
            //        $("th.select-checkbox").addClass("selected");
            //    }
            //});
            $("#gebruikerId").select2({
                minimumInputLength: 1,
                placeholder: "Search",
                allowClear: true,
                multiple: true,
                ajax: {
                    url: "@Url.Action("SkuNumberGet", "Ajax")",
                    dataType: 'json',
                    delay: 0,
                    data: function (term) {
                        return {
                            Search: term.term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.items
                        };
                    }
                }
            });
            $("#VendorID").click(function () {
                  var url = '@Url.Action("GateVendorCurrency", "Ajax")'
                $.ajax({
                    traditional: true,
                    type: "post",
                    url: url,
                    data: {
                        ID: $(this).val(),
                    },
                    success: function (data) {
                        if (data.status) {
                            $("#Currency").val(data.Currency);
                            $("#Tax").val(data.Tax);
                            DataGridC.draw();
                        }
                        else {
                            alert(data.Errmsg);
                        }
                    }
                });
            });
            $("#PaidAmount").change(function () {
                DataGridC.draw();
            });
            $("#addsku").click(function () {
                DataGridC.draw();
            });
            $(".changed").change(function () {
                DataGridC.draw();
            });
            $("#POType").change(function () {
                window.location.href = "@Url.Action("EditItem",new { ID=Model.ID})?POTypeVal=" + $(this).val();
            });
            $("#UploadImage").click(function () {
                var data = new FormData();
                data.append("ID", "@Html.DisplayFor(x=>x.ID)");
                var files = $("#addimg").get(0).files;
                if (files.length > 0) {
                    data.append("Img", files[0]);
                }
                $.ajax({
                    traditional: true,
                    type: "post",
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    url: "@Url.Action("CreatNoteImg")",
                    data: data,
                    success: function (data) {
                        if (data.status) {
                            $("#addimg").val("");
                            $("#textnotelog li").remove();
                            datalistSet(data);

                        }
                        else {
                            alert(data.Errmsg);
                        }
                    }
                });
            });
            $("#addnote").click(function () {
                $.ajax({
                    traditional: true,
                    type: "post",
                    url: "@Url.Action("CreatNote")",
                    data: {
                        ID: "@Html.DisplayFor(x=>x.ID)",
                        Note: $("#textnote").val()
                    },
                    success: function (data) {
                        if (data.status) {
                            $("#textnote").val("");
                            $("#textnotelog li").remove();
                            datalistSet(data);
                        }
                        else {
                            alert(data.Errmsg);
                        }
                    }
                });
            });
            $(tableID + ' tbody').on('click', 'td.details-control', function () {
                var tr = $(this).closest('tr');
                var row = DataGridC.row(tr);

                if (row.child.isShown()) {
                    // This row is already open - close it
                    row.child.hide();
                    tr.removeClass('shown');
                }
                else {
                    // Open this row
                    row.child(GetSerialList(row.data())).show();
                    tr.addClass('shown');
                }
            });
            $("#Removeitems").on("click", function () {
                var dataList = [];
                $(DataGridC.$('input[type="checkbox"]:checked').each(function () {
                    dataList.push($(this).val());
                }));
                //for (var i in rows) {
                //    dataList.push(i);
                //}
                $.ajax({
                    traditional: true,
                    type: "post",
                    url: "@Url.Action("RemoveData")",
                    data: {
                        IDList: dataList,
                        SID:@Html.Display("ID"),
                    },
                    success: function (data) {
                        if (data.status) {
                            $(tableID + ' thead input[type="checkbox"]').prop("checked", false);
                            DataGridC.draw();
                        }
                        else {
                            alert(data.Errmsg);
                        }
                    }
                });
            });
            $("#Edititems").on("click", function () {
                var dataList = [];
                $(DataGridC.$('input[type="checkbox"]:checked').each(function () {
                    dataList.push($(this).val());
                }));
                //for (var i in rows) {
                //    dataList.push(i);
                //}
                $.ajax({
                    traditional: true,
                    type: "post",
                    url: "@Url.Action("EditSKUData")",
                    data: {
                        IDList: dataList,
                        SID:@Html.Display("ID"),
                    },
                    success: function (data) {
                        if (data.status) {
                            $(tableID + ' thead input[type="checkbox"]').prop("checked", false);
                            DataGridC.draw();
                        }
                        else {
                            alert(data.Errmsg);
                        }
                    }
                });
            });
            $("#dialog").dialog({
                autoOpen: false,
                width: 800
            });
            $("body").on("click", ".Excel", function () {
                var url = '@Url.Action("SerialsExcel", "Ajax")'
                $.ajax({
                    url: url,
                    data: { id: $(this).attr("valID"), key: "AddSKUserials"},
                    success: function (data) {
                        $("#dialog").dialog({
                            title: "Excel"
                        });
                        $("#dialog").html(data);
                        $("#dialog").dialog("open");
                        //$("#dialog").load(data).dialog({ modal: true }).dialog('open');
                    }
                });
                return false;
            });
            $("#POEmail").on("click", function () {
                var url = '@Url.Action("PoEmail")'
                $.ajax({
                    url: url,
                    data: { id: '@Html.Display("ID")' },
                    success: function (data) {
                        if (data.status) {
                            alert("Email寄送成功")
                        }
                        else {
                            alert("Email寄送失敗：" + data.Msg)
                        }
                    }
                });
                return false;
            });
            $("#CreateCM").on("click", function () {
                var dataList = [];
                $(DataGridC.$('input[type="checkbox"]:checked').each(function () {
                    dataList.push("Skulist=" + $(this).val());
                }));
                if (dataList.length > 0) {
                    document.location.href = "@Url.Action("CreateCM", "PurchaseOrderCM",new { ID=Model.ID })?" + dataList.join("&");
                }
                else {
                    alert("請勾選SKU");
                }

            });

        });

        function Calculation(x, type, SKU, oval, ID) {
            $.ajax({
                type: "post",
                url: "@Url.Action("SkuNumberListEdit", "Ajax")",
                data: {
                    SID:@Html.Display("ID"),
                    SKU: SKU,
                    type: type,
                    oval: oval,
                    val: $(x).val(),
                    ID: ID
                },
                success: function (data) {
                    if (data.status) {
                        DataGridC.draw();
                    }
                    else {
                        alert(data.Errmsg);
                    }
                }
            });
        }
        function GetSerialList(d) {
            var div = $('<div style="border:2px blue solid;" />').addClass('loading').text('Loading...');
            $.ajax({
                type: "post",
                url: "@Url.Action("GetSerialList")",
                data: {
                    ID: d.ID
                },
                success: function (data) {
                    if (data.status) {
                        div.html(data.partial).removeClass('loading');
                    }
                    else {
                        val = data.Errmsg;
                    }
                }
            });
            return div;
        }
        function Success(data) {
            $("#dialog").dialog("close");
            if (data.status == false) {
                alert(data.Msg);
            }
            if (data.reload == true) {
                window.location.reload();
            }
        }
        function datalistSet(data) {
            data.datalist.forEach(function (value) {
                var href = "";
                if (value.NoteType == "Url") {
                    href = value.Note;
                    $("#textnotelog").append("<li><fieldset><legend><a class='aimg' href='" + href + "' data-lightbox='roadtrip'><img class='img' src='" + href + "' /></a><br />" + value.CreateAt + "；" + value.CreateBy + "</legend></fieldset></li>");
                }
                else if (value.NoteType == "" || value.NoteType == "txt") {
                    $("#textnotelog").append("<li><fieldset><legend>" + value.Note + "<br />" + value.CreateAt + "；" + value.CreateBy + "</legend></fieldset></li>");
                }
                else {
                    href = "data:" + value.NoteType + ";base64," + value.Note;
                    $("#textnotelog").append("<li><fieldset><legend><a class='aimg' href='" + href + "' data-lightbox='roadtrip'><img class='img' src='" + href + "' /></a><br />" + value.CreateAt + "；" + value.CreateBy + "</legend></fieldset></li>");
                }
            });
        }
    var Preview = new function () {

        var root = $("#data-form");

        // 連續的圖片編碼
        var imgcode = '';

        // 選取發生改變
        this.change_file = function () {
            root.on("change", ".ImgFile", function () {
                show(this);
            });
        }

        // 批次圖片，先清空後再插入
        var show = function (input) {
            if (input.files && input.files[0]) {
                clean(input.ID);
                each_img(input.files, input.id);
            }
        }

        // 批次讀取，最後再一次寫入
        var each_img = function (files, ID) {

            $.each(files, function (index, file) {
                var src = URL.createObjectURL(file);
                create_imgcode(src);
            });

            // 放置預覽元素後重設
            root.find("#" + ID + "preview").html(imgcode);
            reset();
        }


        // 建立圖片
        var create_imgcode = function (src) {
            imgcode += '<a class="aimg" href="' + src + '" data-lightbox="roadtrip"><img class="img" src="' + src + '" /></a>';
        }


        // 清空預覽區域
        var clean = function (ID) {
            root.find("#" + ID + "preview").empty();
        }

        // 還原 input[type=file]
        var reset = function () {
            imgcode = '';
            //root.find("#VendorInvoice").val(null);
        }
    }
    // 執行
    Preview.change_file();
</script>
}